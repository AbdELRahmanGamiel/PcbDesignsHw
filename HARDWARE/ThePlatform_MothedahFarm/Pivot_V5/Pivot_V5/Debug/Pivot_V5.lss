
Pivot_V5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000040c  00800060  00001d6e  00001e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  0080046c  0080046c  0000220e  2**0
                  ALLOC
  3 .stab         00000d44  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000335  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003290  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000172c  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000600  00000000  00000000  00004b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf5  00000000  00000000  0000511c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00005e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000444  00000000  00000000  000061f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000961  00000000  00000000  00006634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00006f95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 02 	call	0x512	; 0x512 <main>
      8a:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_Init>:

#include "Includes.h"

void EEPROM_Init(void)
{
	I2C_Init();
      92:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Init>
}
      96:	08 95       	ret

00000098 <EEPROM_WriteByte>:

uint8_t EEPROM_WriteByte(uint16_t Addr,uint8_t data)
{
      98:	1f 93       	push	r17
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
      9e:	ec 01       	movw	r28, r24
      a0:	16 2f       	mov	r17, r22
	I2C_Start();
      a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Start>
	if(I2C_Status() != I2C_START)
      a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
      aa:	88 30       	cpi	r24, 0x08	; 8
      ac:	09 f5       	brne	.+66     	; 0xf0 <EEPROM_WriteByte+0x58>
	return ERROR;
	I2C_Write((uint8_t)(0xA0 | ((Addr & 0x0700) >> 7)));
      ae:	ce 01       	movw	r24, r28
      b0:	80 70       	andi	r24, 0x00	; 0
      b2:	97 70       	andi	r25, 0x07	; 7
      b4:	88 0f       	add	r24, r24
      b6:	89 2f       	mov	r24, r25
      b8:	88 1f       	adc	r24, r24
      ba:	99 0b       	sbc	r25, r25
      bc:	91 95       	neg	r25
      be:	80 6a       	ori	r24, 0xA0	; 160
      c0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Write>
	if(I2C_Status() != I2C_MT_SLA_W_ACK)
      c4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
      c8:	88 31       	cpi	r24, 0x18	; 24
      ca:	a1 f4       	brne	.+40     	; 0xf4 <EEPROM_WriteByte+0x5c>
	return ERROR;
	I2C_Write((uint8_t)Addr);
      cc:	8c 2f       	mov	r24, r28
      ce:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Write>
	if(I2C_Status() != I2C_MT_DATA_ACK)
      d2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
      d6:	88 32       	cpi	r24, 0x28	; 40
      d8:	79 f4       	brne	.+30     	; 0xf8 <EEPROM_WriteByte+0x60>
	return ERROR;
	I2C_Write(data);
      da:	81 2f       	mov	r24, r17
      dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Write>
	if(I2C_Status() != I2C_MT_DATA_ACK)
      e0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
      e4:	88 32       	cpi	r24, 0x28	; 40
      e6:	51 f4       	brne	.+20     	; 0xfc <EEPROM_WriteByte+0x64>
	return ERROR;
	I2C_Stop();
      e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Stop>

	return SUCCESS;
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	07 c0       	rjmp	.+14     	; 0xfe <EEPROM_WriteByte+0x66>

uint8_t EEPROM_WriteByte(uint16_t Addr,uint8_t data)
{
	I2C_Start();
	if(I2C_Status() != I2C_START)
	return ERROR;
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	05 c0       	rjmp	.+10     	; 0xfe <EEPROM_WriteByte+0x66>
	I2C_Write((uint8_t)(0xA0 | ((Addr & 0x0700) >> 7)));
	if(I2C_Status() != I2C_MT_SLA_W_ACK)
	return ERROR;
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	03 c0       	rjmp	.+6      	; 0xfe <EEPROM_WriteByte+0x66>
	I2C_Write((uint8_t)Addr);
	if(I2C_Status() != I2C_MT_DATA_ACK)
	return ERROR;
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	01 c0       	rjmp	.+2      	; 0xfe <EEPROM_WriteByte+0x66>
	I2C_Write(data);
	if(I2C_Status() != I2C_MT_DATA_ACK)
	return ERROR;
      fc:	80 e0       	ldi	r24, 0x00	; 0
	I2C_Stop();

	return SUCCESS;
}
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	1f 91       	pop	r17
     104:	08 95       	ret

00000106 <EEPROM_ReadByte>:

uint8_t EEPROM_ReadByte(uint16_t Addr,uint8_t *data)
{
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	8c 01       	movw	r16, r24
     114:	7b 01       	movw	r14, r22
	I2C_Start();
     116:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Start>
	if(I2C_Status() != I2C_START)
     11a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
     11e:	88 30       	cpi	r24, 0x08	; 8
     120:	81 f5       	brne	.+96     	; 0x182 <EEPROM_ReadByte+0x7c>
	return ERROR;
	I2C_Write((uint8_t)(0xA0 | ((Addr & 0x0700) >> 7)));
     122:	e8 01       	movw	r28, r16
     124:	cc 0f       	add	r28, r28
     126:	cd 2f       	mov	r28, r29
     128:	cc 1f       	adc	r28, r28
     12a:	dd 0b       	sbc	r29, r29
     12c:	d1 95       	neg	r29
     12e:	ce 70       	andi	r28, 0x0E	; 14
     130:	8c 2f       	mov	r24, r28
     132:	80 6a       	ori	r24, 0xA0	; 160
     134:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Write>
	if(I2C_Status() != I2C_MT_SLA_W_ACK)
     138:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
     13c:	88 31       	cpi	r24, 0x18	; 24
     13e:	19 f5       	brne	.+70     	; 0x186 <EEPROM_ReadByte+0x80>
	return ERROR;
	I2C_Write((uint8_t)Addr);
     140:	80 2f       	mov	r24, r16
     142:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Write>
	if(I2C_Status() != I2C_MT_DATA_ACK)
     146:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
     14a:	88 32       	cpi	r24, 0x28	; 40
     14c:	f1 f4       	brne	.+60     	; 0x18a <EEPROM_ReadByte+0x84>
	return ERROR;
	I2C_Start();
     14e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Start>
	if(I2C_Status() != I2C_REP_START)
     152:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
     156:	80 31       	cpi	r24, 0x10	; 16
     158:	d1 f4       	brne	.+52     	; 0x18e <EEPROM_ReadByte+0x88>
	return ERROR;
	I2C_Write((uint8_t)(0xA0 | ((Addr & 0x0700) >> 7) | 1));
     15a:	8c 2f       	mov	r24, r28
     15c:	81 6a       	ori	r24, 0xA1	; 161
     15e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_Write>
	if(I2C_Status() != I2C_MT_SLA_R_ACK)
     162:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
     166:	80 34       	cpi	r24, 0x40	; 64
     168:	a1 f4       	brne	.+40     	; 0x192 <EEPROM_ReadByte+0x8c>
	return ERROR;
	*data = I2C_Read_NO_ACK();
     16a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Read_NO_ACK>
     16e:	f7 01       	movw	r30, r14
     170:	80 83       	st	Z, r24
	if(I2C_Status() != I2C_MR_DATA_NACK)
     172:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Status>
     176:	88 35       	cpi	r24, 0x58	; 88
     178:	71 f4       	brne	.+28     	; 0x196 <EEPROM_ReadByte+0x90>
	return ERROR;
	I2C_Stop();
     17a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Stop>

	return SUCCESS;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	0b c0       	rjmp	.+22     	; 0x198 <EEPROM_ReadByte+0x92>

uint8_t EEPROM_ReadByte(uint16_t Addr,uint8_t *data)
{
	I2C_Start();
	if(I2C_Status() != I2C_START)
	return ERROR;
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	09 c0       	rjmp	.+18     	; 0x198 <EEPROM_ReadByte+0x92>
	I2C_Write((uint8_t)(0xA0 | ((Addr & 0x0700) >> 7)));
	if(I2C_Status() != I2C_MT_SLA_W_ACK)
	return ERROR;
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	07 c0       	rjmp	.+14     	; 0x198 <EEPROM_ReadByte+0x92>
	I2C_Write((uint8_t)Addr);
	if(I2C_Status() != I2C_MT_DATA_ACK)
	return ERROR;
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	05 c0       	rjmp	.+10     	; 0x198 <EEPROM_ReadByte+0x92>
	I2C_Start();
	if(I2C_Status() != I2C_REP_START)
	return ERROR;
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	03 c0       	rjmp	.+6      	; 0x198 <EEPROM_ReadByte+0x92>
	I2C_Write((uint8_t)(0xA0 | ((Addr & 0x0700) >> 7) | 1));
	if(I2C_Status() != I2C_MT_SLA_R_ACK)
	return ERROR;
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	01 c0       	rjmp	.+2      	; 0x198 <EEPROM_ReadByte+0x92>
	*data = I2C_Read_NO_ACK();
	if(I2C_Status() != I2C_MR_DATA_NACK)
	return ERROR;
     196:	80 e0       	ldi	r24, 0x00	; 0
	I2C_Stop();

	return SUCCESS;
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	ff 90       	pop	r15
     1a2:	ef 90       	pop	r14
     1a4:	08 95       	ret

000001a6 <I2C_Init>:

#include "Includes.h"

void I2C_Init(void)
{
	TWBR = 0x02;
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWEN);
     1aa:	94 e0       	ldi	r25, 0x04	; 4
     1ac:	96 bf       	out	0x36, r25	; 54
	TWSR = 0x00;
     1ae:	11 b8       	out	0x01, r1	; 1
	TWAR = 0b00000010;
     1b0:	82 b9       	out	0x02, r24	; 2
}
     1b2:	08 95       	ret

000001b4 <I2C_Start>:

void I2C_Start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     1b4:	84 ea       	ldi	r24, 0xA4	; 164
     1b6:	86 bf       	out	0x36, r24	; 54
	while(Bit_Is_Clear(TWCR,TWINT));
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <I2C_Start+0x4>
}
     1be:	08 95       	ret

000001c0 <I2C_Stop>:

void I2C_Stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     1c0:	84 e9       	ldi	r24, 0x94	; 148
     1c2:	86 bf       	out	0x36, r24	; 54
}
     1c4:	08 95       	ret

000001c6 <I2C_Write>:

void I2C_Write(uint8_t data)
{
	TWDR = data;
     1c6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
     1c8:	84 e8       	ldi	r24, 0x84	; 132
     1ca:	86 bf       	out	0x36, r24	; 54
	while(Bit_Is_Clear(TWCR,TWINT));
     1cc:	06 b6       	in	r0, 0x36	; 54
     1ce:	07 fe       	sbrs	r0, 7
     1d0:	fd cf       	rjmp	.-6      	; 0x1cc <I2C_Write+0x6>
}
     1d2:	08 95       	ret

000001d4 <I2C_Read_ACK>:

uint8_t I2C_Read_ACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     1d4:	84 ec       	ldi	r24, 0xC4	; 196
     1d6:	86 bf       	out	0x36, r24	; 54
	while(Bit_Is_Clear(TWCR,TWINT));
     1d8:	06 b6       	in	r0, 0x36	; 54
     1da:	07 fe       	sbrs	r0, 7
     1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <I2C_Read_ACK+0x4>
	return TWDR;
     1de:	83 b1       	in	r24, 0x03	; 3
}
     1e0:	08 95       	ret

000001e2 <I2C_Read_NO_ACK>:

uint8_t I2C_Read_NO_ACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
     1e2:	84 e8       	ldi	r24, 0x84	; 132
     1e4:	86 bf       	out	0x36, r24	; 54
	while(Bit_Is_Clear(TWCR,TWINT));
     1e6:	06 b6       	in	r0, 0x36	; 54
     1e8:	07 fe       	sbrs	r0, 7
     1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <I2C_Read_NO_ACK+0x4>
	return TWDR;
     1ec:	83 b1       	in	r24, 0x03	; 3
}
     1ee:	08 95       	ret

000001f0 <I2C_Status>:

uint8_t I2C_Status(void)
{
	uint8_t status;
	status = (TWSR & 0xF8);
     1f0:	81 b1       	in	r24, 0x01	; 1
	return status;
     1f2:	88 7f       	andi	r24, 0xF8	; 248
     1f4:	08 95       	ret

000001f6 <__vector_11>:

uint16_t stringcompare(uint8_t *a,uint8_t *b);
uint16_t stringncompare(uint8_t *a,uint8_t *b, uint16_t size);

ISR(TIMER0_OVF_vect)
{
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	11 24       	eor	r1, r1
     200:	2f 93       	push	r18
     202:	3f 93       	push	r19
     204:	4f 93       	push	r20
     206:	5f 93       	push	r21
     208:	6f 93       	push	r22
     20a:	7f 93       	push	r23
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
     210:	af 93       	push	r26
     212:	bf 93       	push	r27
     214:	ef 93       	push	r30
     216:	ff 93       	push	r31
	counter++;
     218:	80 91 7e 04 	lds	r24, 0x047E
     21c:	90 91 7f 04 	lds	r25, 0x047F
     220:	a0 91 80 04 	lds	r26, 0x0480
     224:	b0 91 81 04 	lds	r27, 0x0481
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	a1 1d       	adc	r26, r1
     22c:	b1 1d       	adc	r27, r1
     22e:	80 93 7e 04 	sts	0x047E, r24
     232:	90 93 7f 04 	sts	0x047F, r25
     236:	a0 93 80 04 	sts	0x0480, r26
     23a:	b0 93 81 04 	sts	0x0481, r27
	Hours=eeprom_read_byte((const uint8_t*)HursEEPROMAddr);
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	80 93 88 04 	sts	0x0488, r24
     250:	90 93 89 04 	sts	0x0489, r25
     254:	a0 93 8a 04 	sts	0x048A, r26
     258:	b0 93 8b 04 	sts	0x048B, r27
	Minutes=eeprom_read_byte((const uint8_t*)MinsEEPROMAddr);
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	a0 e0       	ldi	r26, 0x00	; 0
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	80 93 c2 04 	sts	0x04C2, r24
     26e:	90 93 c3 04 	sts	0x04C3, r25
     272:	a0 93 c4 04 	sts	0x04C4, r26
     276:	b0 93 c5 04 	sts	0x04C5, r27

	if (counter==oneMINTimer && Time==AVAILABLE && eeprom_read_byte((const uint8_t*)PassEEPROMAddr)!=1)	Minutes++;
     27a:	80 91 7e 04 	lds	r24, 0x047E
     27e:	90 91 7f 04 	lds	r25, 0x047F
     282:	a0 91 80 04 	lds	r26, 0x0480
     286:	b0 91 81 04 	lds	r27, 0x0481
     28a:	80 31       	cpi	r24, 0x10	; 16
     28c:	2e e0       	ldi	r18, 0x0E	; 14
     28e:	92 07       	cpc	r25, r18
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	a2 07       	cpc	r26, r18
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	b2 07       	cpc	r27, r18
     298:	31 f5       	brne	.+76     	; 0x2e6 <__vector_11+0xf0>
     29a:	80 91 ba 04 	lds	r24, 0x04BA
     29e:	90 91 bb 04 	lds	r25, 0x04BB
     2a2:	a0 91 bc 04 	lds	r26, 0x04BC
     2a6:	b0 91 bd 04 	lds	r27, 0x04BD
     2aa:	00 97       	sbiw	r24, 0x00	; 0
     2ac:	a1 05       	cpc	r26, r1
     2ae:	b1 05       	cpc	r27, r1
     2b0:	d1 f4       	brne	.+52     	; 0x2e6 <__vector_11+0xf0>
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	a1 f0       	breq	.+40     	; 0x2e6 <__vector_11+0xf0>
     2be:	80 91 c2 04 	lds	r24, 0x04C2
     2c2:	90 91 c3 04 	lds	r25, 0x04C3
     2c6:	a0 91 c4 04 	lds	r26, 0x04C4
     2ca:	b0 91 c5 04 	lds	r27, 0x04C5
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	a1 1d       	adc	r26, r1
     2d2:	b1 1d       	adc	r27, r1
     2d4:	80 93 c2 04 	sts	0x04C2, r24
     2d8:	90 93 c3 04 	sts	0x04C3, r25
     2dc:	a0 93 c4 04 	sts	0x04C4, r26
     2e0:	b0 93 c5 04 	sts	0x04C5, r27
     2e4:	92 c0       	rjmp	.+292    	; 0x40a <__vector_11+0x214>
	else if(Minutes>=60 && Time==AVAILABLE){
     2e6:	80 91 c2 04 	lds	r24, 0x04C2
     2ea:	90 91 c3 04 	lds	r25, 0x04C3
     2ee:	a0 91 c4 04 	lds	r26, 0x04C4
     2f2:	b0 91 c5 04 	lds	r27, 0x04C5
     2f6:	8c 33       	cpi	r24, 0x3C	; 60
     2f8:	91 05       	cpc	r25, r1
     2fa:	a1 05       	cpc	r26, r1
     2fc:	b1 05       	cpc	r27, r1
     2fe:	40 f1       	brcs	.+80     	; 0x350 <__vector_11+0x15a>
     300:	80 91 ba 04 	lds	r24, 0x04BA
     304:	90 91 bb 04 	lds	r25, 0x04BB
     308:	a0 91 bc 04 	lds	r26, 0x04BC
     30c:	b0 91 bd 04 	lds	r27, 0x04BD
     310:	00 97       	sbiw	r24, 0x00	; 0
     312:	a1 05       	cpc	r26, r1
     314:	b1 05       	cpc	r27, r1
     316:	e1 f4       	brne	.+56     	; 0x350 <__vector_11+0x15a>
		Hours++;
     318:	80 91 88 04 	lds	r24, 0x0488
     31c:	90 91 89 04 	lds	r25, 0x0489
     320:	a0 91 8a 04 	lds	r26, 0x048A
     324:	b0 91 8b 04 	lds	r27, 0x048B
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	a1 1d       	adc	r26, r1
     32c:	b1 1d       	adc	r27, r1
     32e:	80 93 88 04 	sts	0x0488, r24
     332:	90 93 89 04 	sts	0x0489, r25
     336:	a0 93 8a 04 	sts	0x048A, r26
     33a:	b0 93 8b 04 	sts	0x048B, r27
		Minutes=0;
     33e:	10 92 c2 04 	sts	0x04C2, r1
     342:	10 92 c3 04 	sts	0x04C3, r1
     346:	10 92 c4 04 	sts	0x04C4, r1
     34a:	10 92 c5 04 	sts	0x04C5, r1
     34e:	5d c0       	rjmp	.+186    	; 0x40a <__vector_11+0x214>
	}else if (Hours==24 && eeprom_read_byte((const uint8_t*)PassEEPROMAddr)!=1)
     350:	80 91 88 04 	lds	r24, 0x0488
     354:	90 91 89 04 	lds	r25, 0x0489
     358:	a0 91 8a 04 	lds	r26, 0x048A
     35c:	b0 91 8b 04 	lds	r27, 0x048B
     360:	88 31       	cpi	r24, 0x18	; 24
     362:	91 05       	cpc	r25, r1
     364:	a1 05       	cpc	r26, r1
     366:	b1 05       	cpc	r27, r1
     368:	09 f5       	brne	.+66     	; 0x3ac <__vector_11+0x1b6>
     36a:	84 e0       	ldi	r24, 0x04	; 4
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	d9 f0       	breq	.+54     	; 0x3ac <__vector_11+0x1b6>
	{
		Time = FINISGED;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	a0 e0       	ldi	r26, 0x00	; 0
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	80 93 ba 04 	sts	0x04BA, r24
     382:	90 93 bb 04 	sts	0x04BB, r25
     386:	a0 93 bc 04 	sts	0x04BC, r26
     38a:	b0 93 bd 04 	sts	0x04BD, r27
		PIN_HIGH(SH_REG_EN_PORT,SH_REG_EN_PIN);
     38e:	c1 9a       	sbi	0x18, 1	; 24
		Current_Speed = Sw_Speed;
     390:	80 91 86 04 	lds	r24, 0x0486
     394:	90 91 87 04 	lds	r25, 0x0487
     398:	90 93 a5 04 	sts	0x04A5, r25
     39c:	80 93 a4 04 	sts	0x04A4, r24
		Sw_Speed=0;
     3a0:	10 92 87 04 	sts	0x0487, r1
     3a4:	10 92 86 04 	sts	0x0486, r1
		PIN_LOW(PIVOT_SPEED_PORT,PIVOT_SPEED_PIN);
     3a8:	97 98       	cbi	0x12, 7	; 18
     3aa:	2f c0       	rjmp	.+94     	; 0x40a <__vector_11+0x214>
	}else if (counter <=Sw_Speed)	PIN_HIGH(PIVOT_SPEED_PORT,PIVOT_SPEED_PIN); //PORTD |=(1<<PD7);		//1800
     3ac:	80 91 7e 04 	lds	r24, 0x047E
     3b0:	90 91 7f 04 	lds	r25, 0x047F
     3b4:	a0 91 80 04 	lds	r26, 0x0480
     3b8:	b0 91 81 04 	lds	r27, 0x0481
     3bc:	40 91 86 04 	lds	r20, 0x0486
     3c0:	50 91 87 04 	lds	r21, 0x0487
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	48 17       	cp	r20, r24
     3ca:	59 07       	cpc	r21, r25
     3cc:	6a 07       	cpc	r22, r26
     3ce:	7b 07       	cpc	r23, r27
     3d0:	10 f0       	brcs	.+4      	; 0x3d6 <__vector_11+0x1e0>
     3d2:	97 9a       	sbi	0x12, 7	; 18
     3d4:	1a c0       	rjmp	.+52     	; 0x40a <__vector_11+0x214>
	else if (counter>oneMINTimer) counter =0;							//3600
     3d6:	80 91 7e 04 	lds	r24, 0x047E
     3da:	90 91 7f 04 	lds	r25, 0x047F
     3de:	a0 91 80 04 	lds	r26, 0x0480
     3e2:	b0 91 81 04 	lds	r27, 0x0481
     3e6:	81 31       	cpi	r24, 0x11	; 17
     3e8:	2e e0       	ldi	r18, 0x0E	; 14
     3ea:	92 07       	cpc	r25, r18
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	a2 07       	cpc	r26, r18
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	b2 07       	cpc	r27, r18
     3f4:	48 f0       	brcs	.+18     	; 0x408 <__vector_11+0x212>
     3f6:	10 92 7e 04 	sts	0x047E, r1
     3fa:	10 92 7f 04 	sts	0x047F, r1
     3fe:	10 92 80 04 	sts	0x0480, r1
     402:	10 92 81 04 	sts	0x0481, r1
     406:	01 c0       	rjmp	.+2      	; 0x40a <__vector_11+0x214>
	else	PIN_LOW(PIVOT_SPEED_PORT,PIVOT_SPEED_PIN);					//PORTD &=~(1<<PD7);
     408:	97 98       	cbi	0x12, 7	; 18
	eeprom_update_byte(( uint8_t *)MinsEEPROMAddr,Minutes);
     40a:	40 91 c2 04 	lds	r20, 0x04C2
     40e:	50 91 c3 04 	lds	r21, 0x04C3
     412:	60 91 c4 04 	lds	r22, 0x04C4
     416:	70 91 c5 04 	lds	r23, 0x04C5
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	64 2f       	mov	r22, r20
     420:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
	eeprom_update_byte(( uint8_t *)HursEEPROMAddr,Hours);
     424:	40 91 88 04 	lds	r20, 0x0488
     428:	50 91 89 04 	lds	r21, 0x0489
     42c:	60 91 8a 04 	lds	r22, 0x048A
     430:	70 91 8b 04 	lds	r23, 0x048B
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	64 2f       	mov	r22, r20
     43a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
}
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0f be       	out	0x3f, r0	; 63
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <stringcompare>:



// Comparing both the strings using pointers
uint16_t stringcompare(uint8_t *a,uint8_t *b)
{
     460:	db 01       	movw	r26, r22
	uint16_t flag=0;
	while(*a!='\0' && *b!='\0')  // while loop
     462:	fc 01       	movw	r30, r24
     464:	20 81       	ld	r18, Z
     466:	22 23       	and	r18, r18
     468:	99 f0       	breq	.+38     	; 0x490 <stringcompare+0x30>
     46a:	3c 91       	ld	r19, X
     46c:	33 23       	and	r19, r19
     46e:	99 f0       	breq	.+38     	; 0x496 <stringcompare+0x36>
	{
		if(*a!=*b)
     470:	23 17       	cp	r18, r19
     472:	a1 f4       	brne	.+40     	; 0x49c <stringcompare+0x3c>




// Comparing both the strings using pointers
uint16_t stringcompare(uint8_t *a,uint8_t *b)
     474:	31 96       	adiw	r30, 0x01	; 1
     476:	11 96       	adiw	r26, 0x01	; 1
     478:	02 c0       	rjmp	.+4      	; 0x47e <stringcompare+0x1e>
{
	uint16_t flag=0;
	while(*a!='\0' && *b!='\0')  // while loop
	{
		if(*a!=*b)
     47a:	89 17       	cp	r24, r25
     47c:	91 f4       	brne	.+36     	; 0x4a2 <stringcompare+0x42>

// Comparing both the strings using pointers
uint16_t stringcompare(uint8_t *a,uint8_t *b)
{
	uint16_t flag=0;
	while(*a!='\0' && *b!='\0')  // while loop
     47e:	81 91       	ld	r24, Z+
     480:	88 23       	and	r24, r24
     482:	91 f0       	breq	.+36     	; 0x4a8 <stringcompare+0x48>
     484:	9d 91       	ld	r25, X+
     486:	99 23       	and	r25, r25
     488:	c1 f7       	brne	.-16     	; 0x47a <stringcompare+0x1a>


// Comparing both the strings using pointers
uint16_t stringcompare(uint8_t *a,uint8_t *b)
{
	uint16_t flag=0;
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	0e c0       	rjmp	.+28     	; 0x4ac <stringcompare+0x4c>
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	0b c0       	rjmp	.+22     	; 0x4ac <stringcompare+0x4c>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	08 c0       	rjmp	.+16     	; 0x4ac <stringcompare+0x4c>
	while(*a!='\0' && *b!='\0')  // while loop
	{
		if(*a!=*b)
		{
			flag=1;
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <stringcompare+0x4c>
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <stringcompare+0x4c>


// Comparing both the strings using pointers
uint16_t stringcompare(uint8_t *a,uint8_t *b)
{
	uint16_t flag=0;
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
			a++;
			b++;
		}

	}
	if(flag==0)	return 0;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	21 15       	cp	r18, r1
     4b2:	31 05       	cpc	r19, r1
     4b4:	11 f4       	brne	.+4      	; 0x4ba <stringcompare+0x5a>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
	else	return 1;
}	
     4ba:	08 95       	ret

000004bc <stringncompare>:

// Comparing both the strings using pointers
uint16_t stringncompare(uint8_t *a,uint8_t *b, uint16_t size)
{
     4bc:	dc 01       	movw	r26, r24
     4be:	fb 01       	movw	r30, r22
	uint16_t flag=0;
	for (int i=1;i<=size; i++)   /*For Loop*/
     4c0:	41 15       	cp	r20, r1
     4c2:	51 05       	cpc	r21, r1
     4c4:	b1 f0       	breq	.+44     	; 0x4f2 <stringncompare+0x36>
	{
		if(a[i]!=b[i]){
     4c6:	11 96       	adiw	r26, 0x01	; 1
     4c8:	9c 91       	ld	r25, X
     4ca:	11 97       	sbiw	r26, 0x01	; 1
     4cc:	81 81       	ldd	r24, Z+1	; 0x01
     4ce:	98 17       	cp	r25, r24
     4d0:	99 f4       	brne	.+38     	; 0x4f8 <stringncompare+0x3c>
	if(flag==0)	return 0;
	else	return 1;
}	

// Comparing both the strings using pointers
uint16_t stringncompare(uint8_t *a,uint8_t *b, uint16_t size)
     4d2:	12 96       	adiw	r26, 0x02	; 2
     4d4:	32 96       	adiw	r30, 0x02	; 2
{
	uint16_t flag=0;
	for (int i=1;i<=size; i++)   /*For Loop*/
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	04 c0       	rjmp	.+8      	; 0x4e4 <stringncompare+0x28>
	{
		if(a[i]!=b[i]){
     4dc:	3d 91       	ld	r19, X+
     4de:	21 91       	ld	r18, Z+
     4e0:	32 17       	cp	r19, r18
     4e2:	69 f4       	brne	.+26     	; 0x4fe <stringncompare+0x42>

// Comparing both the strings using pointers
uint16_t stringncompare(uint8_t *a,uint8_t *b, uint16_t size)
{
	uint16_t flag=0;
	for (int i=1;i<=size; i++)   /*For Loop*/
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	48 17       	cp	r20, r24
     4e8:	59 07       	cpc	r21, r25
     4ea:	c0 f7       	brcc	.-16     	; 0x4dc <stringncompare+0x20>
}	

// Comparing both the strings using pointers
uint16_t stringncompare(uint8_t *a,uint8_t *b, uint16_t size)
{
	uint16_t flag=0;
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	08 c0       	rjmp	.+16     	; 0x502 <stringncompare+0x46>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <stringncompare+0x46>
	for (int i=1;i<=size; i++)   /*For Loop*/
	{
		if(a[i]!=b[i]){
			flag=1;
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <stringncompare+0x46>
     4fe:	21 e0       	ldi	r18, 0x01	; 1
     500:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}	
	}
	if(flag==0)	return 0;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	21 15       	cp	r18, r1
     508:	31 05       	cpc	r19, r1
     50a:	11 f4       	brne	.+4      	; 0x510 <stringncompare+0x54>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
	else	return 1;
     510:	08 95       	ret

00000512 <main>:
}

int main(void)
{
	/*SET TWO SHIFT REGISTERS PIN AS OUTPUT*/
	GPIO_OUTPUT(LCDSPRREG,DS_SHLCD);
     512:	a4 9a       	sbi	0x14, 4	; 20
	GPIO_OUTPUT(LCDSPRREG,SH_SHLCD);
     514:	a3 9a       	sbi	0x14, 3	; 20
	GPIO_OUTPUT(LCDSPRREG,ST_SHLCD);
     516:	a2 9a       	sbi	0x14, 2	; 20
	GPIO_OUTPUT(LCD_BL_EN_DDR,LCD_BL_EN);
     518:	a6 9a       	sbi	0x14, 6	; 20
	GPIO_OUTPUT(RELAYREG,DS_SHRELY);
     51a:	b8 9a       	sbi	0x17, 0	; 23
	GPIO_OUTPUT(RELAYREG,SH_SHRELY);
     51c:	bb 9a       	sbi	0x17, 3	; 23
	GPIO_OUTPUT(RELAYREG,ST_SHRELY);
     51e:	ba 9a       	sbi	0x17, 2	; 23
	GPIO_OUTPUT(SH_REG_EN_DDR,SH_REG_EN_PIN);
     520:	b9 9a       	sbi	0x17, 1	; 23
	/*MAKE THE SHIFT REGISTER EN PIN OUTPUT*/
	GPIO_OUTPUT(SH_REG_EN_DDR,SH_REG_EN);
     522:	b9 9a       	sbi	0x17, 1	; 23
	/*Pivot Speed Control Pin - OUTPUT*/
	GPIO_OUTPUT(PIVOT_SPEED_DDR,PIVOT_SPEED_PIN); 
     524:	8f 9a       	sbi	0x11, 7	; 17
	/*Manual Indicator for our system - INPUT*/
	GPIO_INPUT(MANUAL_IND_DDR,MANUAL_IND_PIN);
     526:	8c 98       	cbi	0x11, 4	; 17
	/*Generator Indicator -INPUT*/
	GPIO_INPUT(GENERATOR_IND_DDR,GENERATOR_IND_PIN);
     528:	bc 98       	cbi	0x17, 4	; 23


	
	/*MAKE SHIFT REGISTER EN=LOW*/
	PIN_LOW(SH_REG_EN_PORT,SH_REG_EN_PIN);		/*SHIFT REGISTER WORKS WITH LOW (ZERO)*/
     52a:	c1 98       	cbi	0x18, 1	; 24
	/*INIT TWO SHIFT REGERTERS OUTPUT */
	sendTwoByteRelays(0x0000);
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
	
	UART_Init(9600);
     534:	60 e8       	ldi	r22, 0x80	; 128
     536:	75 e2       	ldi	r23, 0x25	; 37
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <UART_Init>
	TIMER0_Init();
     540:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <TIMER0_Init>
	kp=0;
     544:	10 92 76 04 	sts	0x0476, r1
     548:	10 92 77 04 	sts	0x0477, r1
     54c:	10 92 78 04 	sts	0x0478, r1
     550:	10 92 79 04 	sts	0x0479, r1
     554:	10 92 7a 04 	sts	0x047A, r1
     558:	10 92 7b 04 	sts	0x047B, r1
     55c:	10 92 7c 04 	sts	0x047C, r1
     560:	10 92 7d 04 	sts	0x047D, r1
	Sw_Speed =0;		/*Pivot Speed initially is 50%*/
     564:	10 92 87 04 	sts	0x0487, r1
     568:	10 92 86 04 	sts	0x0486, r1
	Current_Speed=	0.5*oneMINTimer;
     56c:	88 e0       	ldi	r24, 0x08	; 8
     56e:	97 e0       	ldi	r25, 0x07	; 7
     570:	90 93 a5 04 	sts	0x04A5, r25
     574:	80 93 a4 04 	sts	0x04A4, r24
	UART_SendString("WELCOME FROM ATMEGA32 ");
     578:	80 e6       	ldi	r24, 0x60	; 96
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>

	while(1)
	{
		memset(buffer,0,strlen(buffer));
     580:	c0 e9       	ldi	r28, 0x90	; 144
     582:	d4 e0       	ldi	r29, 0x04	; 4
		UART_GetString(buffer);	
		USART_SendInteger((uint16_t)strlen(buffer));
		UART_SendString(" - ");
     584:	07 e7       	ldi	r16, 0x77	; 119
     586:	10 e0       	ldi	r17, 0x00	; 0
		UART_SendString(buffer);
		UART_SendString(" - ");	
		USART_SendInteger((uint8_t)eeprom_read_byte((const uint8_t*)HursEEPROMAddr));
		UART_SendString(":");
     588:	0f 2e       	mov	r0, r31
     58a:	fb e7       	ldi	r31, 0x7B	; 123
     58c:	ef 2e       	mov	r14, r31
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	ff 2e       	mov	r15, r31
     592:	f0 2d       	mov	r31, r0
		UART_SendString(" - ");
		if (strlen(buffer)>=8)
		{
			//if(buffer[1]==Pass[1] &&buffer[2]==Pass[2] &&buffer[3]==Pass[3] &&buffer[4]==Pass[4] &&buffer[5]==Pass[5] &&buffer[6]==Pass[6]&&buffer[7]==Pass[7] &&buffer[8]==Pass[8] ) {
			//if(!strncmp(buffer,Pass,strlen(Pass))){
			if(!stringncompare(buffer,PASSWORD,strlen(PASSWORD))){
     594:	0f 2e       	mov	r0, r31
     596:	fd e7       	ldi	r31, 0x7D	; 125
     598:	cf 2e       	mov	r12, r31
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	df 2e       	mov	r13, r31
     59e:	f0 2d       	mov	r31, r0
			strcpy(Password,PASSWORD);
			UART_SendString("PASWORD CORRECT ");
			//UART_SendString(Password);
			eeprom_update_byte((const uint8_t *)PassEEPROMAddr,1);
			}else if((!stringncompare(buffer,PASSWORD1,strlen(PASSWORD1)))&& eeprom_read_byte((const uint8_t*)Pass1EEPROMAddr) !=1){
     5a0:	0f 2e       	mov	r0, r31
     5a2:	f7 e9       	ldi	r31, 0x97	; 151
     5a4:	af 2e       	mov	r10, r31
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	bf 2e       	mov	r11, r31
     5aa:	f0 2d       	mov	r31, r0
					Sw_Speed = Current_Speed;
					Time = AVAILABLE;
					eeprom_update_byte((const uint8_t *)Pass1EEPROMAddr,1);
				}else UART_SendString("WAIT TILL AVIALABLE TIME FINISHED");

			}else if((!stringncompare(buffer,PASSWORD2,strlen(PASSWORD2))) &&eeprom_read_byte((const uint8_t*)Pass2EEPROMAddr) !=1){
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f1 ef       	ldi	r31, 0xF1	; 241
     5b0:	4f 2e       	mov	r4, r31
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	5f 2e       	mov	r5, r31
     5b6:	f0 2d       	mov	r31, r0
					eeprom_update_byte((const uint8_t *)HursEEPROMAddr,0);
					UART_SendString("PASWORD CORRECT - AVAILABLE FOR 100 HOURS ");
					Sw_Speed = Current_Speed;
					Time = AVAILABLE;
					eeprom_update_byte((const uint8_t *)Pass2EEPROMAddr,1);
				}else UART_SendString("WAIT TILL AVIALABLE TIME FINISHED");
     5b8:	0f 2e       	mov	r0, r31
     5ba:	ff ec       	ldi	r31, 0xCF	; 207
     5bc:	6f 2e       	mov	r6, r31
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	7f 2e       	mov	r7, r31
     5c2:	f0 2d       	mov	r31, r0
		if (strlen(buffer)>=8)
		{
			//if(buffer[1]==Pass[1] &&buffer[2]==Pass[2] &&buffer[3]==Pass[3] &&buffer[4]==Pass[4] &&buffer[5]==Pass[5] &&buffer[6]==Pass[6]&&buffer[7]==Pass[7] &&buffer[8]==Pass[8] ) {
			//if(!strncmp(buffer,Pass,strlen(Pass))){
			if(!stringncompare(buffer,PASSWORD,strlen(PASSWORD))){
			strcpy(Password,PASSWORD);
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f6 ea       	ldi	r31, 0xA6	; 166
     5c8:	8f 2e       	mov	r8, r31
     5ca:	f4 e0       	ldi	r31, 0x04	; 4
     5cc:	9f 2e       	mov	r9, r31
     5ce:	f0 2d       	mov	r31, r0
							count1=0;
							Sw_Speed= Current_Speed;
						}else UART_SendString("GENERATOR OFF - FIRE GENER FIRST");
					}			
				}else{												/*MANUAL CASE*/
					UART_SendString("MANUAL MODE ON - ");
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f9 e1       	ldi	r31, 0x19	; 25
     5d4:	2f 2e       	mov	r2, r31
     5d6:	f4 e0       	ldi	r31, 0x04	; 4
     5d8:	3f 2e       	mov	r3, r31
     5da:	f0 2d       	mov	r31, r0
	Current_Speed=	0.5*oneMINTimer;
	UART_SendString("WELCOME FROM ATMEGA32 ");

	while(1)
	{
		memset(buffer,0,strlen(buffer));
     5dc:	fe 01       	movw	r30, r28
     5de:	01 90       	ld	r0, Z+
     5e0:	00 20       	and	r0, r0
     5e2:	e9 f7       	brne	.-6      	; 0x5de <main+0xcc>
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	af 01       	movw	r20, r30
     5e8:	4c 1b       	sub	r20, r28
     5ea:	5d 0b       	sbc	r21, r29
     5ec:	8c 2f       	mov	r24, r28
     5ee:	9d 2f       	mov	r25, r29
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <memset>
		UART_GetString(buffer);	
     5f8:	ce 01       	movw	r24, r28
     5fa:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <UART_GetString>
		USART_SendInteger((uint16_t)strlen(buffer));
     5fe:	de 01       	movw	r26, r28
     600:	0d 90       	ld	r0, X+
     602:	00 20       	and	r0, r0
     604:	e9 f7       	brne	.-6      	; 0x600 <main+0xee>
     606:	cd 01       	movw	r24, r26
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	8c 1b       	sub	r24, r28
     60c:	9d 0b       	sbc	r25, r29
     60e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <USART_SendInteger>
		UART_SendString(" - ");
     612:	c8 01       	movw	r24, r16
     614:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
		UART_SendString(buffer);
     618:	ce 01       	movw	r24, r28
     61a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
		UART_SendString(" - ");	
     61e:	c8 01       	movw	r24, r16
     620:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
		USART_SendInteger((uint8_t)eeprom_read_byte((const uint8_t*)HursEEPROMAddr));
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <USART_SendInteger>
		UART_SendString(":");
     632:	c7 01       	movw	r24, r14
     634:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
		USART_SendInteger((uint8_t)eeprom_read_byte((const uint8_t*)MinsEEPROMAddr));
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <USART_SendInteger>
		UART_SendString(" - ");
     646:	c8 01       	movw	r24, r16
     648:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
		if (strlen(buffer)>=8)
     64c:	fe 01       	movw	r30, r28
     64e:	01 90       	ld	r0, Z+
     650:	00 20       	and	r0, r0
     652:	e9 f7       	brne	.-6      	; 0x64e <main+0x13c>
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	ec 1b       	sub	r30, r28
     658:	fd 0b       	sbc	r31, r29
     65a:	e8 30       	cpi	r30, 0x08	; 8
     65c:	f1 05       	cpc	r31, r1
     65e:	08 f4       	brcc	.+2      	; 0x662 <main+0x150>
     660:	a4 c0       	rjmp	.+328    	; 0x7aa <main+0x298>
		{
			//if(buffer[1]==Pass[1] &&buffer[2]==Pass[2] &&buffer[3]==Pass[3] &&buffer[4]==Pass[4] &&buffer[5]==Pass[5] &&buffer[6]==Pass[6]&&buffer[7]==Pass[7] &&buffer[8]==Pass[8] ) {
			//if(!strncmp(buffer,Pass,strlen(Pass))){
			if(!stringncompare(buffer,PASSWORD,strlen(PASSWORD))){
     662:	ce 01       	movw	r24, r28
     664:	b6 01       	movw	r22, r12
     666:	48 e0       	ldi	r20, 0x08	; 8
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <stringncompare>
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	89 f4       	brne	.+34     	; 0x694 <main+0x182>
			strcpy(Password,PASSWORD);
     672:	f4 01       	movw	r30, r8
     674:	d6 01       	movw	r26, r12
     676:	89 e0       	ldi	r24, 0x09	; 9
     678:	0d 90       	ld	r0, X+
     67a:	01 92       	st	Z+, r0
     67c:	81 50       	subi	r24, 0x01	; 1
     67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x166>
			UART_SendString("PASWORD CORRECT ");
     680:	86 e8       	ldi	r24, 0x86	; 134
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
			//UART_SendString(Password);
			eeprom_update_byte((const uint8_t *)PassEEPROMAddr,1);
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
     692:	a4 cf       	rjmp	.-184    	; 0x5dc <main+0xca>
			}else if((!stringncompare(buffer,PASSWORD1,strlen(PASSWORD1)))&& eeprom_read_byte((const uint8_t*)Pass1EEPROMAddr) !=1){
     694:	ce 01       	movw	r24, r28
     696:	b5 01       	movw	r22, r10
     698:	4c e0       	ldi	r20, 0x0C	; 12
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <stringncompare>
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	d9 f5       	brne	.+118    	; 0x71a <main+0x208>
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	a9 f1       	breq	.+106    	; 0x71a <main+0x208>
				if (Time == FINISGED)
     6b0:	80 91 ba 04 	lds	r24, 0x04BA
     6b4:	90 91 bb 04 	lds	r25, 0x04BB
     6b8:	a0 91 bc 04 	lds	r26, 0x04BC
     6bc:	b0 91 bd 04 	lds	r27, 0x04BD
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	91 05       	cpc	r25, r1
     6c4:	a1 05       	cpc	r26, r1
     6c6:	b1 05       	cpc	r27, r1
     6c8:	21 f5       	brne	.+72     	; 0x712 <main+0x200>
				{
					eeprom_update_byte((const uint8_t *)MinsEEPROMAddr,0);
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
					eeprom_update_byte((const uint8_t *)HursEEPROMAddr,0);
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
					UART_SendString("PASWORD CORRECT - AVAILABLE FOR 100 HOURS ");
     6de:	84 ea       	ldi	r24, 0xA4	; 164
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
					Sw_Speed = Current_Speed;
     6e6:	80 91 a4 04 	lds	r24, 0x04A4
     6ea:	90 91 a5 04 	lds	r25, 0x04A5
     6ee:	90 93 87 04 	sts	0x0487, r25
     6f2:	80 93 86 04 	sts	0x0486, r24
					Time = AVAILABLE;
     6f6:	10 92 ba 04 	sts	0x04BA, r1
     6fa:	10 92 bb 04 	sts	0x04BB, r1
     6fe:	10 92 bc 04 	sts	0x04BC, r1
     702:	10 92 bd 04 	sts	0x04BD, r1
					eeprom_update_byte((const uint8_t *)Pass1EEPROMAddr,1);
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
     710:	65 cf       	rjmp	.-310    	; 0x5dc <main+0xca>
				}else UART_SendString("WAIT TILL AVIALABLE TIME FINISHED");
     712:	c3 01       	movw	r24, r6
     714:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
     718:	61 cf       	rjmp	.-318    	; 0x5dc <main+0xca>

			}else if((!stringncompare(buffer,PASSWORD2,strlen(PASSWORD2))) &&eeprom_read_byte((const uint8_t*)Pass2EEPROMAddr) !=1){
     71a:	ce 01       	movw	r24, r28
     71c:	b2 01       	movw	r22, r4
     71e:	4c e0       	ldi	r20, 0x0C	; 12
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	0e 94 5e 02 	call	0x4bc	; 0x4bc <stringncompare>
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	d9 f5       	brne	.+118    	; 0x7a0 <main+0x28e>
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	a9 f1       	breq	.+106    	; 0x7a0 <main+0x28e>
				if (Time == FINISGED)
     736:	80 91 ba 04 	lds	r24, 0x04BA
     73a:	90 91 bb 04 	lds	r25, 0x04BB
     73e:	a0 91 bc 04 	lds	r26, 0x04BC
     742:	b0 91 bd 04 	lds	r27, 0x04BD
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	91 05       	cpc	r25, r1
     74a:	a1 05       	cpc	r26, r1
     74c:	b1 05       	cpc	r27, r1
     74e:	21 f5       	brne	.+72     	; 0x798 <main+0x286>
				{
					eeprom_update_byte((const uint8_t *)MinsEEPROMAddr,0);
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
					eeprom_update_byte((const uint8_t *)HursEEPROMAddr,0);
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
					UART_SendString("PASWORD CORRECT - AVAILABLE FOR 100 HOURS ");
     764:	84 ea       	ldi	r24, 0xA4	; 164
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
					Sw_Speed = Current_Speed;
     76c:	80 91 a4 04 	lds	r24, 0x04A4
     770:	90 91 a5 04 	lds	r25, 0x04A5
     774:	90 93 87 04 	sts	0x0487, r25
     778:	80 93 86 04 	sts	0x0486, r24
					Time = AVAILABLE;
     77c:	10 92 ba 04 	sts	0x04BA, r1
     780:	10 92 bb 04 	sts	0x04BB, r1
     784:	10 92 bc 04 	sts	0x04BC, r1
     788:	10 92 bd 04 	sts	0x04BD, r1
					eeprom_update_byte((const uint8_t *)Pass2EEPROMAddr,1);
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__eeupd_byte_m32>
     796:	22 cf       	rjmp	.-444    	; 0x5dc <main+0xca>
				}else UART_SendString("WAIT TILL AVIALABLE TIME FINISHED");
     798:	c3 01       	movw	r24, r6
     79a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
     79e:	1e cf       	rjmp	.-452    	; 0x5dc <main+0xca>
			}else	UART_SendString("PASWORD IS NOT CORRECT ");			
     7a0:	8e ef       	ldi	r24, 0xFE	; 254
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
     7a8:	19 cf       	rjmp	.-462    	; 0x5dc <main+0xca>
		}else if(strlen(buffer)<=5){
     7aa:	e6 30       	cpi	r30, 0x06	; 6
     7ac:	f1 05       	cpc	r31, r1
     7ae:	08 f0       	brcs	.+2      	; 0x7b2 <main+0x2a0>
     7b0:	15 cf       	rjmp	.-470    	; 0x5dc <main+0xca>
			kp=atoi(buffer);
     7b2:	ce 01       	movw	r24, r28
     7b4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <atoi>
     7b8:	28 2f       	mov	r18, r24
     7ba:	89 2f       	mov	r24, r25
     7bc:	88 0f       	add	r24, r24
     7be:	88 0b       	sbc	r24, r24
     7c0:	20 93 76 04 	sts	0x0476, r18
     7c4:	90 93 77 04 	sts	0x0477, r25
     7c8:	80 93 78 04 	sts	0x0478, r24
     7cc:	80 93 79 04 	sts	0x0479, r24
     7d0:	80 93 7a 04 	sts	0x047A, r24
     7d4:	80 93 7b 04 	sts	0x047B, r24
     7d8:	80 93 7c 04 	sts	0x047C, r24
     7dc:	80 93 7d 04 	sts	0x047D, r24
			USART_SendInteger(kp);
     7e0:	82 2f       	mov	r24, r18
     7e2:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <USART_SendInteger>
			if ((Time==AVAILABLE || eeprom_read_byte((const uint8_t*)PassEEPROMAddr) ==1))
     7e6:	80 91 ba 04 	lds	r24, 0x04BA
     7ea:	90 91 bb 04 	lds	r25, 0x04BB
     7ee:	a0 91 bc 04 	lds	r26, 0x04BC
     7f2:	b0 91 bd 04 	lds	r27, 0x04BD
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	a1 05       	cpc	r26, r1
     7fa:	b1 05       	cpc	r27, r1
     7fc:	41 f0       	breq	.+16     	; 0x80e <main+0x2fc>
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__eerd_byte_m32>
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	11 f0       	breq	.+4      	; 0x80e <main+0x2fc>
     80a:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__stack+0xfc5>
				{
				if (MANUAL_IND_PIND&(1<<MANUAL_IND_PIN)){			/*AUTO CASE*/
     80e:	84 9b       	sbis	0x10, 4	; 16
     810:	4b c7       	rjmp	.+3734   	; 0x16a8 <__stack+0xe49>
					if (GENERATOR_IND_PINB&(1<<GENERATOR_IND_PIN))	/*GENERATOR ON - NORMAL MODE*/
     812:	b4 9b       	sbis	0x16, 4	; 22
     814:	eb c6       	rjmp	.+3542   	; 0x15ec <__stack+0xd8d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	99 e6       	ldi	r25, 0x69	; 105
     81a:	a8 e1       	ldi	r26, 0x18	; 24
     81c:	81 50       	subi	r24, 0x01	; 1
     81e:	90 40       	sbci	r25, 0x00	; 0
     820:	a0 40       	sbci	r26, 0x00	; 0
     822:	e1 f7       	brne	.-8      	; 0x81c <main+0x30a>
     824:	00 c0       	rjmp	.+0      	; 0x826 <main+0x314>
     826:	00 00       	nop
					{
						_delay_ms(500);
						sendTwoByteRelays(OPEN_RELAY(RELAY15));
     828:	80 91 84 04 	lds	r24, 0x0484
     82c:	90 91 85 04 	lds	r25, 0x0485
     830:	90 64       	ori	r25, 0x40	; 64
     832:	90 93 85 04 	sts	0x0485, r25
     836:	80 93 84 04 	sts	0x0484, r24
     83a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
						PIN_LOW(SH_REG_EN_PORT,SH_REG_EN_PIN);		/*SHIFT REGISTER WORKS WITH LOW (ZERO)*/
     83e:	c1 98       	cbi	0x18, 1	; 24
						//Sw_Speed =0.5*oneMINTimer;
						UART_SendString("NORMAL MODE - ");
     840:	86 e1       	ldi	r24, 0x16	; 22
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						if(kp==GENERATOR_ON_RELAY){
     848:	80 91 76 04 	lds	r24, 0x0476
     84c:	90 91 77 04 	lds	r25, 0x0477
     850:	20 91 78 04 	lds	r18, 0x0478
     854:	70 91 79 04 	lds	r23, 0x0479
     858:	60 91 7a 04 	lds	r22, 0x047A
     85c:	50 91 7b 04 	lds	r21, 0x047B
     860:	40 91 7c 04 	lds	r20, 0x047C
     864:	30 91 7d 04 	lds	r19, 0x047D
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
     86c:	49 c0       	rjmp	.+146    	; 0x900 <__stack+0xa1>
     86e:	99 23       	and	r25, r25
     870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
     872:	46 c0       	rjmp	.+140    	; 0x900 <__stack+0xa1>
     874:	22 23       	and	r18, r18
     876:	09 f0       	breq	.+2      	; 0x87a <__stack+0x1b>
     878:	43 c0       	rjmp	.+134    	; 0x900 <__stack+0xa1>
     87a:	77 23       	and	r23, r23
     87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
     87e:	40 c0       	rjmp	.+128    	; 0x900 <__stack+0xa1>
     880:	66 23       	and	r22, r22
     882:	f1 f5       	brne	.+124    	; 0x900 <__stack+0xa1>
     884:	55 23       	and	r21, r21
     886:	e1 f5       	brne	.+120    	; 0x900 <__stack+0xa1>
     888:	44 23       	and	r20, r20
     88a:	d1 f5       	brne	.+116    	; 0x900 <__stack+0xa1>
     88c:	33 23       	and	r19, r19
     88e:	c1 f5       	brne	.+112    	; 0x900 <__stack+0xa1>
							if (count0==0)
     890:	80 91 75 04 	lds	r24, 0x0475
     894:	88 23       	and	r24, r24
     896:	f9 f4       	brne	.+62     	; 0x8d6 <__stack+0x77>
							{
								sendTwoByteRelays(OPEN_RELAY(RELAY0));
     898:	80 91 84 04 	lds	r24, 0x0484
     89c:	90 91 85 04 	lds	r25, 0x0485
     8a0:	80 68       	ori	r24, 0x80	; 128
     8a2:	90 93 85 04 	sts	0x0485, r25
     8a6:	80 93 84 04 	sts	0x0484, r24
     8aa:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("GENERATOR ON Now");
     8ae:	85 e2       	ldi	r24, 0x25	; 37
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count0++;
     8b6:	80 91 75 04 	lds	r24, 0x0475
     8ba:	8f 5f       	subi	r24, 0xFF	; 255
     8bc:	80 93 75 04 	sts	0x0475, r24
								count1=0;
     8c0:	10 92 74 04 	sts	0x0474, r1
								Sw_Speed = Current_Speed;
     8c4:	80 91 a4 04 	lds	r24, 0x04A4
     8c8:	90 91 a5 04 	lds	r25, 0x04A5
     8cc:	90 93 87 04 	sts	0x0487, r25
     8d0:	80 93 86 04 	sts	0x0486, r24
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <__stack+0x7f>
							}else UART_SendString("GENERATOR Already ON Now");
     8d6:	86 e3       	ldi	r24, 0x36	; 54
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     8de:	10 92 76 04 	sts	0x0476, r1
     8e2:	10 92 77 04 	sts	0x0477, r1
     8e6:	10 92 78 04 	sts	0x0478, r1
     8ea:	10 92 79 04 	sts	0x0479, r1
     8ee:	10 92 7a 04 	sts	0x047A, r1
     8f2:	10 92 7b 04 	sts	0x047B, r1
     8f6:	10 92 7c 04 	sts	0x047C, r1
     8fa:	10 92 7d 04 	sts	0x047D, r1
     8fe:	6e ce       	rjmp	.-804    	; 0x5dc <main+0xca>
						}else if(kp==GENERATOR_OFF_RELAY){
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	09 f0       	breq	.+2      	; 0x906 <__stack+0xa7>
     904:	51 c0       	rjmp	.+162    	; 0x9a8 <__stack+0x149>
     906:	99 23       	and	r25, r25
     908:	09 f0       	breq	.+2      	; 0x90c <__stack+0xad>
     90a:	4e c0       	rjmp	.+156    	; 0x9a8 <__stack+0x149>
     90c:	22 23       	and	r18, r18
     90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0xb3>
     910:	4b c0       	rjmp	.+150    	; 0x9a8 <__stack+0x149>
     912:	77 23       	and	r23, r23
     914:	09 f0       	breq	.+2      	; 0x918 <__stack+0xb9>
     916:	48 c0       	rjmp	.+144    	; 0x9a8 <__stack+0x149>
     918:	66 23       	and	r22, r22
     91a:	09 f0       	breq	.+2      	; 0x91e <__stack+0xbf>
     91c:	45 c0       	rjmp	.+138    	; 0x9a8 <__stack+0x149>
     91e:	55 23       	and	r21, r21
     920:	09 f0       	breq	.+2      	; 0x924 <__stack+0xc5>
     922:	42 c0       	rjmp	.+132    	; 0x9a8 <__stack+0x149>
     924:	44 23       	and	r20, r20
     926:	09 f0       	breq	.+2      	; 0x92a <__stack+0xcb>
     928:	3f c0       	rjmp	.+126    	; 0x9a8 <__stack+0x149>
     92a:	33 23       	and	r19, r19
     92c:	e9 f5       	brne	.+122    	; 0x9a8 <__stack+0x149>
							if (count1==0)
     92e:	80 91 74 04 	lds	r24, 0x0474
     932:	88 23       	and	r24, r24
     934:	21 f5       	brne	.+72     	; 0x97e <__stack+0x11f>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY0));
     936:	80 91 84 04 	lds	r24, 0x0484
     93a:	90 91 85 04 	lds	r25, 0x0485
     93e:	8f 77       	andi	r24, 0x7F	; 127
     940:	90 93 85 04 	sts	0x0485, r25
     944:	80 93 84 04 	sts	0x0484, r24
     948:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								PIN_HIGH(SH_REG_EN_PORT,SH_REG_EN_PIN);
     94c:	c1 9a       	sbi	0x18, 1	; 24
								Current_Speed = Sw_Speed;
     94e:	80 91 86 04 	lds	r24, 0x0486
     952:	90 91 87 04 	lds	r25, 0x0487
     956:	90 93 a5 04 	sts	0x04A5, r25
     95a:	80 93 a4 04 	sts	0x04A4, r24
								Sw_Speed=0;
     95e:	10 92 87 04 	sts	0x0487, r1
     962:	10 92 86 04 	sts	0x0486, r1
								UART_SendString("GENERATOR OFF Now");
     966:	8f e4       	ldi	r24, 0x4F	; 79
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count1++;
     96e:	80 91 74 04 	lds	r24, 0x0474
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	80 93 74 04 	sts	0x0474, r24
								count0=0;
     978:	10 92 75 04 	sts	0x0475, r1
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__stack+0x127>
							}else UART_SendString("GENERATOR Already OFF Now");
     97e:	81 e6       	ldi	r24, 0x61	; 97
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     986:	10 92 76 04 	sts	0x0476, r1
     98a:	10 92 77 04 	sts	0x0477, r1
     98e:	10 92 78 04 	sts	0x0478, r1
     992:	10 92 79 04 	sts	0x0479, r1
     996:	10 92 7a 04 	sts	0x047A, r1
     99a:	10 92 7b 04 	sts	0x047B, r1
     99e:	10 92 7c 04 	sts	0x047C, r1
     9a2:	10 92 7d 04 	sts	0x047D, r1
     9a6:	1a ce       	rjmp	.-972    	; 0x5dc <main+0xca>
						}else if(kp==ON_RELAY){
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	09 f0       	breq	.+2      	; 0x9ae <__stack+0x14f>
     9ac:	44 c0       	rjmp	.+136    	; 0xa36 <__stack+0x1d7>
     9ae:	99 23       	and	r25, r25
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <__stack+0x155>
     9b2:	41 c0       	rjmp	.+130    	; 0xa36 <__stack+0x1d7>
     9b4:	22 23       	and	r18, r18
     9b6:	09 f0       	breq	.+2      	; 0x9ba <__stack+0x15b>
     9b8:	3e c0       	rjmp	.+124    	; 0xa36 <__stack+0x1d7>
     9ba:	77 23       	and	r23, r23
     9bc:	e1 f5       	brne	.+120    	; 0xa36 <__stack+0x1d7>
     9be:	66 23       	and	r22, r22
     9c0:	d1 f5       	brne	.+116    	; 0xa36 <__stack+0x1d7>
     9c2:	55 23       	and	r21, r21
     9c4:	c1 f5       	brne	.+112    	; 0xa36 <__stack+0x1d7>
     9c6:	44 23       	and	r20, r20
     9c8:	b1 f5       	brne	.+108    	; 0xa36 <__stack+0x1d7>
     9ca:	33 23       	and	r19, r19
     9cc:	a1 f5       	brne	.+104    	; 0xa36 <__stack+0x1d7>
							sendTwoByteRelays(OPEN_RELAY(RELAY1));		/*open 5 second*/
     9ce:	80 91 84 04 	lds	r24, 0x0484
     9d2:	90 91 85 04 	lds	r25, 0x0485
     9d6:	90 68       	ori	r25, 0x80	; 128
     9d8:	90 93 85 04 	sts	0x0485, r25
     9dc:	80 93 84 04 	sts	0x0484, r24
     9e0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	93 e2       	ldi	r25, 0x23	; 35
     9e8:	a4 ef       	ldi	r26, 0xF4	; 244
     9ea:	81 50       	subi	r24, 0x01	; 1
     9ec:	90 40       	sbci	r25, 0x00	; 0
     9ee:	a0 40       	sbci	r26, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <__stack+0x18b>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <__stack+0x195>
     9f4:	00 00       	nop
							_delay_ms(5000);
							sendTwoByteRelays(CLOSE_RELAY(RELAY1));
     9f6:	80 91 84 04 	lds	r24, 0x0484
     9fa:	90 91 85 04 	lds	r25, 0x0485
     9fe:	9f 77       	andi	r25, 0x7F	; 127
     a00:	90 93 85 04 	sts	0x0485, r25
     a04:	80 93 84 04 	sts	0x0484, r24
     a08:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							UART_SendString("ON Pulse Done ");
     a0c:	8b e7       	ldi	r24, 0x7B	; 123
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     a14:	10 92 76 04 	sts	0x0476, r1
     a18:	10 92 77 04 	sts	0x0477, r1
     a1c:	10 92 78 04 	sts	0x0478, r1
     a20:	10 92 79 04 	sts	0x0479, r1
     a24:	10 92 7a 04 	sts	0x047A, r1
     a28:	10 92 7b 04 	sts	0x047B, r1
     a2c:	10 92 7c 04 	sts	0x047C, r1
     a30:	10 92 7d 04 	sts	0x047D, r1
     a34:	d3 cd       	rjmp	.-1114   	; 0x5dc <main+0xca>
						}else if(kp==OFF_RELAY){
     a36:	84 30       	cpi	r24, 0x04	; 4
     a38:	09 f0       	breq	.+2      	; 0xa3c <__stack+0x1dd>
     a3a:	44 c0       	rjmp	.+136    	; 0xac4 <__stack+0x265>
     a3c:	99 23       	and	r25, r25
     a3e:	09 f0       	breq	.+2      	; 0xa42 <__stack+0x1e3>
     a40:	41 c0       	rjmp	.+130    	; 0xac4 <__stack+0x265>
     a42:	22 23       	and	r18, r18
     a44:	09 f0       	breq	.+2      	; 0xa48 <__stack+0x1e9>
     a46:	3e c0       	rjmp	.+124    	; 0xac4 <__stack+0x265>
     a48:	77 23       	and	r23, r23
     a4a:	e1 f5       	brne	.+120    	; 0xac4 <__stack+0x265>
     a4c:	66 23       	and	r22, r22
     a4e:	d1 f5       	brne	.+116    	; 0xac4 <__stack+0x265>
     a50:	55 23       	and	r21, r21
     a52:	c1 f5       	brne	.+112    	; 0xac4 <__stack+0x265>
     a54:	44 23       	and	r20, r20
     a56:	b1 f5       	brne	.+108    	; 0xac4 <__stack+0x265>
     a58:	33 23       	and	r19, r19
     a5a:	a1 f5       	brne	.+104    	; 0xac4 <__stack+0x265>
							sendTwoByteRelays(OPEN_RELAY(RELAY2));		/*open 5 second*/
     a5c:	80 91 84 04 	lds	r24, 0x0484
     a60:	90 91 85 04 	lds	r25, 0x0485
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	90 93 85 04 	sts	0x0485, r25
     a6a:	80 93 84 04 	sts	0x0484, r24
     a6e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	93 e2       	ldi	r25, 0x23	; 35
     a76:	a4 ef       	ldi	r26, 0xF4	; 244
     a78:	81 50       	subi	r24, 0x01	; 1
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	a0 40       	sbci	r26, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <__stack+0x219>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <__stack+0x223>
     a82:	00 00       	nop
							_delay_ms(5000);
							sendTwoByteRelays(CLOSE_RELAY(RELAY2));
     a84:	80 91 84 04 	lds	r24, 0x0484
     a88:	90 91 85 04 	lds	r25, 0x0485
     a8c:	8e 7f       	andi	r24, 0xFE	; 254
     a8e:	90 93 85 04 	sts	0x0485, r25
     a92:	80 93 84 04 	sts	0x0484, r24
     a96:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							UART_SendString("OFF Pulse Done ");
     a9a:	8a e8       	ldi	r24, 0x8A	; 138
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     aa2:	10 92 76 04 	sts	0x0476, r1
     aa6:	10 92 77 04 	sts	0x0477, r1
     aaa:	10 92 78 04 	sts	0x0478, r1
     aae:	10 92 79 04 	sts	0x0479, r1
     ab2:	10 92 7a 04 	sts	0x047A, r1
     ab6:	10 92 7b 04 	sts	0x047B, r1
     aba:	10 92 7c 04 	sts	0x047C, r1
     abe:	10 92 7d 04 	sts	0x047D, r1
     ac2:	8c cd       	rjmp	.-1256   	; 0x5dc <main+0xca>
						}else if(kp==FORWARD_RELAY){
     ac4:	85 30       	cpi	r24, 0x05	; 5
     ac6:	09 f0       	breq	.+2      	; 0xaca <__stack+0x26b>
     ac8:	5d c0       	rjmp	.+186    	; 0xb84 <__stack+0x325>
     aca:	99 23       	and	r25, r25
     acc:	09 f0       	breq	.+2      	; 0xad0 <__stack+0x271>
     ace:	5a c0       	rjmp	.+180    	; 0xb84 <__stack+0x325>
     ad0:	22 23       	and	r18, r18
     ad2:	09 f0       	breq	.+2      	; 0xad6 <__stack+0x277>
     ad4:	57 c0       	rjmp	.+174    	; 0xb84 <__stack+0x325>
     ad6:	77 23       	and	r23, r23
     ad8:	09 f0       	breq	.+2      	; 0xadc <__stack+0x27d>
     ada:	54 c0       	rjmp	.+168    	; 0xb84 <__stack+0x325>
     adc:	66 23       	and	r22, r22
     ade:	09 f0       	breq	.+2      	; 0xae2 <__stack+0x283>
     ae0:	51 c0       	rjmp	.+162    	; 0xb84 <__stack+0x325>
     ae2:	55 23       	and	r21, r21
     ae4:	09 f0       	breq	.+2      	; 0xae8 <__stack+0x289>
     ae6:	4e c0       	rjmp	.+156    	; 0xb84 <__stack+0x325>
     ae8:	44 23       	and	r20, r20
     aea:	09 f0       	breq	.+2      	; 0xaee <__stack+0x28f>
     aec:	4b c0       	rjmp	.+150    	; 0xb84 <__stack+0x325>
     aee:	33 23       	and	r19, r19
     af0:	09 f0       	breq	.+2      	; 0xaf4 <__stack+0x295>
     af2:	48 c0       	rjmp	.+144    	; 0xb84 <__stack+0x325>
							if (count2==0)
     af4:	80 91 73 04 	lds	r24, 0x0473
     af8:	88 23       	and	r24, r24
     afa:	79 f5       	brne	.+94     	; 0xb5a <__stack+0x2fb>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY4));
     afc:	80 91 84 04 	lds	r24, 0x0484
     b00:	90 91 85 04 	lds	r25, 0x0485
     b04:	8b 7f       	andi	r24, 0xFB	; 251
     b06:	90 93 85 04 	sts	0x0485, r25
     b0a:	80 93 84 04 	sts	0x0484, r24
     b0e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(CLOSE_RELAY(RELAY5));
     b12:	80 91 84 04 	lds	r24, 0x0484
     b16:	90 91 85 04 	lds	r25, 0x0485
     b1a:	87 7f       	andi	r24, 0xF7	; 247
     b1c:	90 93 85 04 	sts	0x0485, r25
     b20:	80 93 84 04 	sts	0x0484, r24
     b24:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY3));
     b28:	80 91 84 04 	lds	r24, 0x0484
     b2c:	90 91 85 04 	lds	r25, 0x0485
     b30:	82 60       	ori	r24, 0x02	; 2
     b32:	90 93 85 04 	sts	0x0485, r25
     b36:	80 93 84 04 	sts	0x0484, r24
     b3a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("FORWARD Working Now");
     b3e:	8a e9       	ldi	r24, 0x9A	; 154
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count2++;
     b46:	80 91 73 04 	lds	r24, 0x0473
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	80 93 73 04 	sts	0x0473, r24
								count3=count4=0;
     b50:	10 92 71 04 	sts	0x0471, r1
     b54:	10 92 72 04 	sts	0x0472, r1
     b58:	04 c0       	rjmp	.+8      	; 0xb62 <__stack+0x303>
							}else UART_SendString("FORWARD Already Working Now");
     b5a:	8e ea       	ldi	r24, 0xAE	; 174
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     b62:	10 92 76 04 	sts	0x0476, r1
     b66:	10 92 77 04 	sts	0x0477, r1
     b6a:	10 92 78 04 	sts	0x0478, r1
     b6e:	10 92 79 04 	sts	0x0479, r1
     b72:	10 92 7a 04 	sts	0x047A, r1
     b76:	10 92 7b 04 	sts	0x047B, r1
     b7a:	10 92 7c 04 	sts	0x047C, r1
     b7e:	10 92 7d 04 	sts	0x047D, r1
     b82:	2c cd       	rjmp	.-1448   	; 0x5dc <main+0xca>
						}else if(kp==AUTO_RELAY){
     b84:	86 30       	cpi	r24, 0x06	; 6
     b86:	09 f0       	breq	.+2      	; 0xb8a <__stack+0x32b>
     b88:	5d c0       	rjmp	.+186    	; 0xc44 <__stack+0x3e5>
     b8a:	99 23       	and	r25, r25
     b8c:	09 f0       	breq	.+2      	; 0xb90 <__stack+0x331>
     b8e:	5a c0       	rjmp	.+180    	; 0xc44 <__stack+0x3e5>
     b90:	22 23       	and	r18, r18
     b92:	09 f0       	breq	.+2      	; 0xb96 <__stack+0x337>
     b94:	57 c0       	rjmp	.+174    	; 0xc44 <__stack+0x3e5>
     b96:	77 23       	and	r23, r23
     b98:	09 f0       	breq	.+2      	; 0xb9c <__stack+0x33d>
     b9a:	54 c0       	rjmp	.+168    	; 0xc44 <__stack+0x3e5>
     b9c:	66 23       	and	r22, r22
     b9e:	09 f0       	breq	.+2      	; 0xba2 <__stack+0x343>
     ba0:	51 c0       	rjmp	.+162    	; 0xc44 <__stack+0x3e5>
     ba2:	55 23       	and	r21, r21
     ba4:	09 f0       	breq	.+2      	; 0xba8 <__stack+0x349>
     ba6:	4e c0       	rjmp	.+156    	; 0xc44 <__stack+0x3e5>
     ba8:	44 23       	and	r20, r20
     baa:	09 f0       	breq	.+2      	; 0xbae <__stack+0x34f>
     bac:	4b c0       	rjmp	.+150    	; 0xc44 <__stack+0x3e5>
     bae:	33 23       	and	r19, r19
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__stack+0x355>
     bb2:	48 c0       	rjmp	.+144    	; 0xc44 <__stack+0x3e5>
							if (count3==0)
     bb4:	80 91 72 04 	lds	r24, 0x0472
     bb8:	88 23       	and	r24, r24
     bba:	79 f5       	brne	.+94     	; 0xc1a <__stack+0x3bb>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY3));
     bbc:	80 91 84 04 	lds	r24, 0x0484
     bc0:	90 91 85 04 	lds	r25, 0x0485
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	90 93 85 04 	sts	0x0485, r25
     bca:	80 93 84 04 	sts	0x0484, r24
     bce:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(CLOSE_RELAY(RELAY5));
     bd2:	80 91 84 04 	lds	r24, 0x0484
     bd6:	90 91 85 04 	lds	r25, 0x0485
     bda:	87 7f       	andi	r24, 0xF7	; 247
     bdc:	90 93 85 04 	sts	0x0485, r25
     be0:	80 93 84 04 	sts	0x0484, r24
     be4:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY4));
     be8:	80 91 84 04 	lds	r24, 0x0484
     bec:	90 91 85 04 	lds	r25, 0x0485
     bf0:	84 60       	ori	r24, 0x04	; 4
     bf2:	90 93 85 04 	sts	0x0485, r25
     bf6:	80 93 84 04 	sts	0x0484, r24
     bfa:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("AUTO Working Now");
     bfe:	8a ec       	ldi	r24, 0xCA	; 202
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count3++;
     c06:	80 91 72 04 	lds	r24, 0x0472
     c0a:	8f 5f       	subi	r24, 0xFF	; 255
     c0c:	80 93 72 04 	sts	0x0472, r24
								count4=count2=0;
     c10:	10 92 73 04 	sts	0x0473, r1
     c14:	10 92 71 04 	sts	0x0471, r1
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <__stack+0x3c3>
							}else UART_SendString("AUTO Already Working Now");
     c1a:	8b ed       	ldi	r24, 0xDB	; 219
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     c22:	10 92 76 04 	sts	0x0476, r1
     c26:	10 92 77 04 	sts	0x0477, r1
     c2a:	10 92 78 04 	sts	0x0478, r1
     c2e:	10 92 79 04 	sts	0x0479, r1
     c32:	10 92 7a 04 	sts	0x047A, r1
     c36:	10 92 7b 04 	sts	0x047B, r1
     c3a:	10 92 7c 04 	sts	0x047C, r1
     c3e:	10 92 7d 04 	sts	0x047D, r1
     c42:	cc cc       	rjmp	.-1640   	; 0x5dc <main+0xca>
						}else if(kp==REVERSE_RELAY){
     c44:	87 30       	cpi	r24, 0x07	; 7
     c46:	09 f0       	breq	.+2      	; 0xc4a <__stack+0x3eb>
     c48:	5d c0       	rjmp	.+186    	; 0xd04 <__stack+0x4a5>
     c4a:	99 23       	and	r25, r25
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__stack+0x3f1>
     c4e:	5a c0       	rjmp	.+180    	; 0xd04 <__stack+0x4a5>
     c50:	22 23       	and	r18, r18
     c52:	09 f0       	breq	.+2      	; 0xc56 <__stack+0x3f7>
     c54:	57 c0       	rjmp	.+174    	; 0xd04 <__stack+0x4a5>
     c56:	77 23       	and	r23, r23
     c58:	09 f0       	breq	.+2      	; 0xc5c <__stack+0x3fd>
     c5a:	54 c0       	rjmp	.+168    	; 0xd04 <__stack+0x4a5>
     c5c:	66 23       	and	r22, r22
     c5e:	09 f0       	breq	.+2      	; 0xc62 <__stack+0x403>
     c60:	51 c0       	rjmp	.+162    	; 0xd04 <__stack+0x4a5>
     c62:	55 23       	and	r21, r21
     c64:	09 f0       	breq	.+2      	; 0xc68 <__stack+0x409>
     c66:	4e c0       	rjmp	.+156    	; 0xd04 <__stack+0x4a5>
     c68:	44 23       	and	r20, r20
     c6a:	09 f0       	breq	.+2      	; 0xc6e <__stack+0x40f>
     c6c:	4b c0       	rjmp	.+150    	; 0xd04 <__stack+0x4a5>
     c6e:	33 23       	and	r19, r19
     c70:	09 f0       	breq	.+2      	; 0xc74 <__stack+0x415>
     c72:	48 c0       	rjmp	.+144    	; 0xd04 <__stack+0x4a5>
							if (count4==0)
     c74:	80 91 71 04 	lds	r24, 0x0471
     c78:	88 23       	and	r24, r24
     c7a:	79 f5       	brne	.+94     	; 0xcda <__stack+0x47b>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY4));
     c7c:	80 91 84 04 	lds	r24, 0x0484
     c80:	90 91 85 04 	lds	r25, 0x0485
     c84:	8b 7f       	andi	r24, 0xFB	; 251
     c86:	90 93 85 04 	sts	0x0485, r25
     c8a:	80 93 84 04 	sts	0x0484, r24
     c8e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(CLOSE_RELAY(RELAY3));
     c92:	80 91 84 04 	lds	r24, 0x0484
     c96:	90 91 85 04 	lds	r25, 0x0485
     c9a:	8d 7f       	andi	r24, 0xFD	; 253
     c9c:	90 93 85 04 	sts	0x0485, r25
     ca0:	80 93 84 04 	sts	0x0484, r24
     ca4:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY5));
     ca8:	80 91 84 04 	lds	r24, 0x0484
     cac:	90 91 85 04 	lds	r25, 0x0485
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	90 93 85 04 	sts	0x0485, r25
     cb6:	80 93 84 04 	sts	0x0484, r24
     cba:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("REVERSE Working Now");
     cbe:	84 ef       	ldi	r24, 0xF4	; 244
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count4++;
     cc6:	80 91 71 04 	lds	r24, 0x0471
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 93 71 04 	sts	0x0471, r24
								count2=count3=0;
     cd0:	10 92 72 04 	sts	0x0472, r1
     cd4:	10 92 73 04 	sts	0x0473, r1
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__stack+0x483>
							}else UART_SendString("REVERSE Already Working Now");
     cda:	88 e0       	ldi	r24, 0x08	; 8
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     ce2:	10 92 76 04 	sts	0x0476, r1
     ce6:	10 92 77 04 	sts	0x0477, r1
     cea:	10 92 78 04 	sts	0x0478, r1
     cee:	10 92 79 04 	sts	0x0479, r1
     cf2:	10 92 7a 04 	sts	0x047A, r1
     cf6:	10 92 7b 04 	sts	0x047B, r1
     cfa:	10 92 7c 04 	sts	0x047C, r1
     cfe:	10 92 7d 04 	sts	0x047D, r1
     d02:	6c cc       	rjmp	.-1832   	; 0x5dc <main+0xca>
						}else if(kp==DRY_RELAY){
     d04:	88 30       	cpi	r24, 0x08	; 8
     d06:	09 f0       	breq	.+2      	; 0xd0a <__stack+0x4ab>
     d08:	68 c0       	rjmp	.+208    	; 0xdda <__stack+0x57b>
     d0a:	99 23       	and	r25, r25
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__stack+0x4b1>
     d0e:	65 c0       	rjmp	.+202    	; 0xdda <__stack+0x57b>
     d10:	22 23       	and	r18, r18
     d12:	09 f0       	breq	.+2      	; 0xd16 <__stack+0x4b7>
     d14:	62 c0       	rjmp	.+196    	; 0xdda <__stack+0x57b>
     d16:	77 23       	and	r23, r23
     d18:	09 f0       	breq	.+2      	; 0xd1c <__stack+0x4bd>
     d1a:	5f c0       	rjmp	.+190    	; 0xdda <__stack+0x57b>
     d1c:	66 23       	and	r22, r22
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__stack+0x4c3>
     d20:	5c c0       	rjmp	.+184    	; 0xdda <__stack+0x57b>
     d22:	55 23       	and	r21, r21
     d24:	09 f0       	breq	.+2      	; 0xd28 <__stack+0x4c9>
     d26:	59 c0       	rjmp	.+178    	; 0xdda <__stack+0x57b>
     d28:	44 23       	and	r20, r20
     d2a:	09 f0       	breq	.+2      	; 0xd2e <__stack+0x4cf>
     d2c:	56 c0       	rjmp	.+172    	; 0xdda <__stack+0x57b>
     d2e:	33 23       	and	r19, r19
     d30:	09 f0       	breq	.+2      	; 0xd34 <__stack+0x4d5>
     d32:	53 c0       	rjmp	.+166    	; 0xdda <__stack+0x57b>
							if (count5==0)
     d34:	80 91 70 04 	lds	r24, 0x0470
     d38:	88 23       	and	r24, r24
     d3a:	d1 f5       	brne	.+116    	; 0xdb0 <__stack+0x551>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY7));
     d3c:	80 91 84 04 	lds	r24, 0x0484
     d40:	90 91 85 04 	lds	r25, 0x0485
     d44:	8f 7d       	andi	r24, 0xDF	; 223
     d46:	90 93 85 04 	sts	0x0485, r25
     d4a:	80 93 84 04 	sts	0x0484, r24
     d4e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(CLOSE_RELAY(RELAY8));
     d52:	80 91 84 04 	lds	r24, 0x0484
     d56:	90 91 85 04 	lds	r25, 0x0485
     d5a:	8f 7b       	andi	r24, 0xBF	; 191
     d5c:	90 93 85 04 	sts	0x0485, r25
     d60:	80 93 84 04 	sts	0x0484, r24
     d64:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY6));
     d68:	80 91 84 04 	lds	r24, 0x0484
     d6c:	90 91 85 04 	lds	r25, 0x0485
     d70:	80 61       	ori	r24, 0x10	; 16
     d72:	90 93 85 04 	sts	0x0485, r25
     d76:	80 93 84 04 	sts	0x0484, r24
     d7a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY9));
     d7e:	80 91 84 04 	lds	r24, 0x0484
     d82:	90 91 85 04 	lds	r25, 0x0485
     d86:	91 60       	ori	r25, 0x01	; 1
     d88:	90 93 85 04 	sts	0x0485, r25
     d8c:	80 93 84 04 	sts	0x0484, r24
     d90:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("DRY Working Now");
     d94:	84 e2       	ldi	r24, 0x24	; 36
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count5++;
     d9c:	80 91 70 04 	lds	r24, 0x0470
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	80 93 70 04 	sts	0x0470, r24
								count6=count7=0;
     da6:	10 92 6e 04 	sts	0x046E, r1
     daa:	10 92 6f 04 	sts	0x046F, r1
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <__stack+0x559>
							}else UART_SendString("DRY Already Working Now");
     db0:	84 e3       	ldi	r24, 0x34	; 52
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     db8:	10 92 76 04 	sts	0x0476, r1
     dbc:	10 92 77 04 	sts	0x0477, r1
     dc0:	10 92 78 04 	sts	0x0478, r1
     dc4:	10 92 79 04 	sts	0x0479, r1
     dc8:	10 92 7a 04 	sts	0x047A, r1
     dcc:	10 92 7b 04 	sts	0x047B, r1
     dd0:	10 92 7c 04 	sts	0x047C, r1
     dd4:	10 92 7d 04 	sts	0x047D, r1
     dd8:	01 cc       	rjmp	.-2046   	; 0x5dc <main+0xca>
						}else if(kp==WET_RELAY){
     dda:	89 30       	cpi	r24, 0x09	; 9
     ddc:	09 f0       	breq	.+2      	; 0xde0 <__stack+0x581>
     dde:	68 c0       	rjmp	.+208    	; 0xeb0 <__stack+0x651>
     de0:	99 23       	and	r25, r25
     de2:	09 f0       	breq	.+2      	; 0xde6 <__stack+0x587>
     de4:	65 c0       	rjmp	.+202    	; 0xeb0 <__stack+0x651>
     de6:	22 23       	and	r18, r18
     de8:	09 f0       	breq	.+2      	; 0xdec <__stack+0x58d>
     dea:	62 c0       	rjmp	.+196    	; 0xeb0 <__stack+0x651>
     dec:	77 23       	and	r23, r23
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__stack+0x593>
     df0:	5f c0       	rjmp	.+190    	; 0xeb0 <__stack+0x651>
     df2:	66 23       	and	r22, r22
     df4:	09 f0       	breq	.+2      	; 0xdf8 <__stack+0x599>
     df6:	5c c0       	rjmp	.+184    	; 0xeb0 <__stack+0x651>
     df8:	55 23       	and	r21, r21
     dfa:	09 f0       	breq	.+2      	; 0xdfe <__stack+0x59f>
     dfc:	59 c0       	rjmp	.+178    	; 0xeb0 <__stack+0x651>
     dfe:	44 23       	and	r20, r20
     e00:	09 f0       	breq	.+2      	; 0xe04 <__stack+0x5a5>
     e02:	56 c0       	rjmp	.+172    	; 0xeb0 <__stack+0x651>
     e04:	33 23       	and	r19, r19
     e06:	09 f0       	breq	.+2      	; 0xe0a <__stack+0x5ab>
     e08:	53 c0       	rjmp	.+166    	; 0xeb0 <__stack+0x651>
							if (count6==0)
     e0a:	80 91 6f 04 	lds	r24, 0x046F
     e0e:	88 23       	and	r24, r24
     e10:	d1 f5       	brne	.+116    	; 0xe86 <__stack+0x627>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY6));
     e12:	80 91 84 04 	lds	r24, 0x0484
     e16:	90 91 85 04 	lds	r25, 0x0485
     e1a:	8f 7e       	andi	r24, 0xEF	; 239
     e1c:	90 93 85 04 	sts	0x0485, r25
     e20:	80 93 84 04 	sts	0x0484, r24
     e24:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(CLOSE_RELAY(RELAY9));
     e28:	80 91 84 04 	lds	r24, 0x0484
     e2c:	90 91 85 04 	lds	r25, 0x0485
     e30:	9e 7f       	andi	r25, 0xFE	; 254
     e32:	90 93 85 04 	sts	0x0485, r25
     e36:	80 93 84 04 	sts	0x0484, r24
     e3a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(CLOSE_RELAY(RELAY8));
     e3e:	80 91 84 04 	lds	r24, 0x0484
     e42:	90 91 85 04 	lds	r25, 0x0485
     e46:	8f 7b       	andi	r24, 0xBF	; 191
     e48:	90 93 85 04 	sts	0x0485, r25
     e4c:	80 93 84 04 	sts	0x0484, r24
     e50:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY7));
     e54:	80 91 84 04 	lds	r24, 0x0484
     e58:	90 91 85 04 	lds	r25, 0x0485
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	90 93 85 04 	sts	0x0485, r25
     e62:	80 93 84 04 	sts	0x0484, r24
     e66:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("WET Working Now");
     e6a:	8c e4       	ldi	r24, 0x4C	; 76
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count6++;
     e72:	80 91 6f 04 	lds	r24, 0x046F
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	80 93 6f 04 	sts	0x046F, r24
								count7=count5=0;
     e7c:	10 92 70 04 	sts	0x0470, r1
     e80:	10 92 6e 04 	sts	0x046E, r1
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <__stack+0x62f>
							}else UART_SendString("WET Already Working Now");
     e86:	8c e5       	ldi	r24, 0x5C	; 92
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     e8e:	10 92 76 04 	sts	0x0476, r1
     e92:	10 92 77 04 	sts	0x0477, r1
     e96:	10 92 78 04 	sts	0x0478, r1
     e9a:	10 92 79 04 	sts	0x0479, r1
     e9e:	10 92 7a 04 	sts	0x047A, r1
     ea2:	10 92 7b 04 	sts	0x047B, r1
     ea6:	10 92 7c 04 	sts	0x047C, r1
     eaa:	10 92 7d 04 	sts	0x047D, r1
     eae:	96 cb       	rjmp	.-2260   	; 0x5dc <main+0xca>
						}else if(kp==AUX_RELAY){
     eb0:	8a 30       	cpi	r24, 0x0A	; 10
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <__stack+0x657>
     eb4:	68 c0       	rjmp	.+208    	; 0xf86 <__stack+0x727>
     eb6:	99 23       	and	r25, r25
     eb8:	09 f0       	breq	.+2      	; 0xebc <__stack+0x65d>
     eba:	65 c0       	rjmp	.+202    	; 0xf86 <__stack+0x727>
     ebc:	22 23       	and	r18, r18
     ebe:	09 f0       	breq	.+2      	; 0xec2 <__stack+0x663>
     ec0:	62 c0       	rjmp	.+196    	; 0xf86 <__stack+0x727>
     ec2:	77 23       	and	r23, r23
     ec4:	09 f0       	breq	.+2      	; 0xec8 <__stack+0x669>
     ec6:	5f c0       	rjmp	.+190    	; 0xf86 <__stack+0x727>
     ec8:	66 23       	and	r22, r22
     eca:	09 f0       	breq	.+2      	; 0xece <__stack+0x66f>
     ecc:	5c c0       	rjmp	.+184    	; 0xf86 <__stack+0x727>
     ece:	55 23       	and	r21, r21
     ed0:	09 f0       	breq	.+2      	; 0xed4 <__stack+0x675>
     ed2:	59 c0       	rjmp	.+178    	; 0xf86 <__stack+0x727>
     ed4:	44 23       	and	r20, r20
     ed6:	09 f0       	breq	.+2      	; 0xeda <__stack+0x67b>
     ed8:	56 c0       	rjmp	.+172    	; 0xf86 <__stack+0x727>
     eda:	33 23       	and	r19, r19
     edc:	09 f0       	breq	.+2      	; 0xee0 <__stack+0x681>
     ede:	53 c0       	rjmp	.+166    	; 0xf86 <__stack+0x727>
							if (count7==0)
     ee0:	80 91 6e 04 	lds	r24, 0x046E
     ee4:	88 23       	and	r24, r24
     ee6:	d1 f5       	brne	.+116    	; 0xf5c <__stack+0x6fd>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY7));
     ee8:	80 91 84 04 	lds	r24, 0x0484
     eec:	90 91 85 04 	lds	r25, 0x0485
     ef0:	8f 7d       	andi	r24, 0xDF	; 223
     ef2:	90 93 85 04 	sts	0x0485, r25
     ef6:	80 93 84 04 	sts	0x0484, r24
     efa:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(CLOSE_RELAY(RELAY6));
     efe:	80 91 84 04 	lds	r24, 0x0484
     f02:	90 91 85 04 	lds	r25, 0x0485
     f06:	8f 7e       	andi	r24, 0xEF	; 239
     f08:	90 93 85 04 	sts	0x0485, r25
     f0c:	80 93 84 04 	sts	0x0484, r24
     f10:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(CLOSE_RELAY(RELAY9));
     f14:	80 91 84 04 	lds	r24, 0x0484
     f18:	90 91 85 04 	lds	r25, 0x0485
     f1c:	9e 7f       	andi	r25, 0xFE	; 254
     f1e:	90 93 85 04 	sts	0x0485, r25
     f22:	80 93 84 04 	sts	0x0484, r24
     f26:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY8));
     f2a:	80 91 84 04 	lds	r24, 0x0484
     f2e:	90 91 85 04 	lds	r25, 0x0485
     f32:	80 64       	ori	r24, 0x40	; 64
     f34:	90 93 85 04 	sts	0x0485, r25
     f38:	80 93 84 04 	sts	0x0484, r24
     f3c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("AUX Working Now");
     f40:	84 e7       	ldi	r24, 0x74	; 116
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count7++;
     f48:	80 91 6e 04 	lds	r24, 0x046E
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	80 93 6e 04 	sts	0x046E, r24
								count5=count6=0;
     f52:	10 92 6f 04 	sts	0x046F, r1
     f56:	10 92 70 04 	sts	0x0470, r1
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <__stack+0x705>
							}else UART_SendString("AUX Already Working Now");
     f5c:	84 e8       	ldi	r24, 0x84	; 132
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
     f64:	10 92 76 04 	sts	0x0476, r1
     f68:	10 92 77 04 	sts	0x0477, r1
     f6c:	10 92 78 04 	sts	0x0478, r1
     f70:	10 92 79 04 	sts	0x0479, r1
     f74:	10 92 7a 04 	sts	0x047A, r1
     f78:	10 92 7b 04 	sts	0x047B, r1
     f7c:	10 92 7c 04 	sts	0x047C, r1
     f80:	10 92 7d 04 	sts	0x047D, r1
     f84:	2b cb       	rjmp	.-2474   	; 0x5dc <main+0xca>
						}else if(kp==DIRECTION_ON_RELAY){
     f86:	8b 30       	cpi	r24, 0x0B	; 11
     f88:	09 f0       	breq	.+2      	; 0xf8c <__stack+0x72d>
     f8a:	4e c0       	rjmp	.+156    	; 0x1028 <__stack+0x7c9>
     f8c:	99 23       	and	r25, r25
     f8e:	09 f0       	breq	.+2      	; 0xf92 <__stack+0x733>
     f90:	4b c0       	rjmp	.+150    	; 0x1028 <__stack+0x7c9>
     f92:	22 23       	and	r18, r18
     f94:	09 f0       	breq	.+2      	; 0xf98 <__stack+0x739>
     f96:	48 c0       	rjmp	.+144    	; 0x1028 <__stack+0x7c9>
     f98:	77 23       	and	r23, r23
     f9a:	09 f0       	breq	.+2      	; 0xf9e <__stack+0x73f>
     f9c:	45 c0       	rjmp	.+138    	; 0x1028 <__stack+0x7c9>
     f9e:	66 23       	and	r22, r22
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <__stack+0x745>
     fa2:	42 c0       	rjmp	.+132    	; 0x1028 <__stack+0x7c9>
     fa4:	55 23       	and	r21, r21
     fa6:	09 f0       	breq	.+2      	; 0xfaa <__stack+0x74b>
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <__stack+0x7c9>
     faa:	44 23       	and	r20, r20
     fac:	e9 f5       	brne	.+122    	; 0x1028 <__stack+0x7c9>
     fae:	33 23       	and	r19, r19
     fb0:	d9 f5       	brne	.+118    	; 0x1028 <__stack+0x7c9>
							if (count8==0)
     fb2:	80 91 6d 04 	lds	r24, 0x046D
     fb6:	88 23       	and	r24, r24
     fb8:	11 f5       	brne	.+68     	; 0xffe <__stack+0x79f>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY11));
     fba:	80 91 84 04 	lds	r24, 0x0484
     fbe:	90 91 85 04 	lds	r25, 0x0485
     fc2:	9d 7f       	andi	r25, 0xFD	; 253
     fc4:	90 93 85 04 	sts	0x0485, r25
     fc8:	80 93 84 04 	sts	0x0484, r24
     fcc:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY10));
     fd0:	80 91 84 04 	lds	r24, 0x0484
     fd4:	90 91 85 04 	lds	r25, 0x0485
     fd8:	90 62       	ori	r25, 0x20	; 32
     fda:	90 93 85 04 	sts	0x0485, r25
     fde:	80 93 84 04 	sts	0x0484, r24
     fe2:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("DIRECTION_ON Working Now");
     fe6:	8c e9       	ldi	r24, 0x9C	; 156
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count8++;
     fee:	80 91 6d 04 	lds	r24, 0x046D
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	80 93 6d 04 	sts	0x046D, r24
								count9=0;
     ff8:	10 92 6c 04 	sts	0x046C, r1
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <__stack+0x7a7>
							}else UART_SendString("DIRECTION_ON Already Working Now");
     ffe:	85 eb       	ldi	r24, 0xB5	; 181
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    1006:	10 92 76 04 	sts	0x0476, r1
    100a:	10 92 77 04 	sts	0x0477, r1
    100e:	10 92 78 04 	sts	0x0478, r1
    1012:	10 92 79 04 	sts	0x0479, r1
    1016:	10 92 7a 04 	sts	0x047A, r1
    101a:	10 92 7b 04 	sts	0x047B, r1
    101e:	10 92 7c 04 	sts	0x047C, r1
    1022:	10 92 7d 04 	sts	0x047D, r1
    1026:	da ca       	rjmp	.-2636   	; 0x5dc <main+0xca>
						}else if(kp==DIRECTION_OFF_RELAY){
    1028:	8c 30       	cpi	r24, 0x0C	; 12
    102a:	09 f0       	breq	.+2      	; 0x102e <__stack+0x7cf>
    102c:	4e c0       	rjmp	.+156    	; 0x10ca <__stack+0x86b>
    102e:	99 23       	and	r25, r25
    1030:	09 f0       	breq	.+2      	; 0x1034 <__stack+0x7d5>
    1032:	4b c0       	rjmp	.+150    	; 0x10ca <__stack+0x86b>
    1034:	22 23       	and	r18, r18
    1036:	09 f0       	breq	.+2      	; 0x103a <__stack+0x7db>
    1038:	48 c0       	rjmp	.+144    	; 0x10ca <__stack+0x86b>
    103a:	77 23       	and	r23, r23
    103c:	09 f0       	breq	.+2      	; 0x1040 <__stack+0x7e1>
    103e:	45 c0       	rjmp	.+138    	; 0x10ca <__stack+0x86b>
    1040:	66 23       	and	r22, r22
    1042:	09 f0       	breq	.+2      	; 0x1046 <__stack+0x7e7>
    1044:	42 c0       	rjmp	.+132    	; 0x10ca <__stack+0x86b>
    1046:	55 23       	and	r21, r21
    1048:	09 f0       	breq	.+2      	; 0x104c <__stack+0x7ed>
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <__stack+0x86b>
    104c:	44 23       	and	r20, r20
    104e:	e9 f5       	brne	.+122    	; 0x10ca <__stack+0x86b>
    1050:	33 23       	and	r19, r19
    1052:	d9 f5       	brne	.+118    	; 0x10ca <__stack+0x86b>
							if (count9==0)
    1054:	80 91 6c 04 	lds	r24, 0x046C
    1058:	88 23       	and	r24, r24
    105a:	11 f5       	brne	.+68     	; 0x10a0 <__stack+0x841>
							{
								sendTwoByteRelays(CLOSE_RELAY(RELAY10));
    105c:	80 91 84 04 	lds	r24, 0x0484
    1060:	90 91 85 04 	lds	r25, 0x0485
    1064:	9f 7d       	andi	r25, 0xDF	; 223
    1066:	90 93 85 04 	sts	0x0485, r25
    106a:	80 93 84 04 	sts	0x0484, r24
    106e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								sendTwoByteRelays(OPEN_RELAY(RELAY11));
    1072:	80 91 84 04 	lds	r24, 0x0484
    1076:	90 91 85 04 	lds	r25, 0x0485
    107a:	92 60       	ori	r25, 0x02	; 2
    107c:	90 93 85 04 	sts	0x0485, r25
    1080:	80 93 84 04 	sts	0x0484, r24
    1084:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
								UART_SendString("DIRECTION_OFF Working Now");
    1088:	86 ed       	ldi	r24, 0xD6	; 214
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
								count9++;
    1090:	80 91 6c 04 	lds	r24, 0x046C
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	80 93 6c 04 	sts	0x046C, r24
								count8=0;
    109a:	10 92 6d 04 	sts	0x046D, r1
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__stack+0x849>
							}else UART_SendString("DIRECTION_OFF Already Working Now");
    10a0:	80 ef       	ldi	r24, 0xF0	; 240
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    10a8:	10 92 76 04 	sts	0x0476, r1
    10ac:	10 92 77 04 	sts	0x0477, r1
    10b0:	10 92 78 04 	sts	0x0478, r1
    10b4:	10 92 79 04 	sts	0x0479, r1
    10b8:	10 92 7a 04 	sts	0x047A, r1
    10bc:	10 92 7b 04 	sts	0x047B, r1
    10c0:	10 92 7c 04 	sts	0x047C, r1
    10c4:	10 92 7d 04 	sts	0x047D, r1
    10c8:	89 ca       	rjmp	.-2798   	; 0x5dc <main+0xca>
						}else if(kp==RESTART_RELAY){
    10ca:	8d 30       	cpi	r24, 0x0D	; 13
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <__stack+0x871>
    10ce:	44 c0       	rjmp	.+136    	; 0x1158 <__stack+0x8f9>
    10d0:	99 23       	and	r25, r25
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <__stack+0x877>
    10d4:	41 c0       	rjmp	.+130    	; 0x1158 <__stack+0x8f9>
    10d6:	22 23       	and	r18, r18
    10d8:	09 f0       	breq	.+2      	; 0x10dc <__stack+0x87d>
    10da:	3e c0       	rjmp	.+124    	; 0x1158 <__stack+0x8f9>
    10dc:	77 23       	and	r23, r23
    10de:	e1 f5       	brne	.+120    	; 0x1158 <__stack+0x8f9>
    10e0:	66 23       	and	r22, r22
    10e2:	d1 f5       	brne	.+116    	; 0x1158 <__stack+0x8f9>
    10e4:	55 23       	and	r21, r21
    10e6:	c1 f5       	brne	.+112    	; 0x1158 <__stack+0x8f9>
    10e8:	44 23       	and	r20, r20
    10ea:	b1 f5       	brne	.+108    	; 0x1158 <__stack+0x8f9>
    10ec:	33 23       	and	r19, r19
    10ee:	a1 f5       	brne	.+104    	; 0x1158 <__stack+0x8f9>
							sendTwoByteRelays(OPEN_RELAY(RELAY12));		/*open 5 second*/
    10f0:	80 91 84 04 	lds	r24, 0x0484
    10f4:	90 91 85 04 	lds	r25, 0x0485
    10f8:	94 60       	ori	r25, 0x04	; 4
    10fa:	90 93 85 04 	sts	0x0485, r25
    10fe:	80 93 84 04 	sts	0x0484, r24
    1102:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	93 e2       	ldi	r25, 0x23	; 35
    110a:	a4 ef       	ldi	r26, 0xF4	; 244
    110c:	81 50       	subi	r24, 0x01	; 1
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	a0 40       	sbci	r26, 0x00	; 0
    1112:	e1 f7       	brne	.-8      	; 0x110c <__stack+0x8ad>
    1114:	00 c0       	rjmp	.+0      	; 0x1116 <__stack+0x8b7>
    1116:	00 00       	nop
							_delay_ms(5000);
							sendTwoByteRelays(CLOSE_RELAY(RELAY12));
    1118:	80 91 84 04 	lds	r24, 0x0484
    111c:	90 91 85 04 	lds	r25, 0x0485
    1120:	9b 7f       	andi	r25, 0xFB	; 251
    1122:	90 93 85 04 	sts	0x0485, r25
    1126:	80 93 84 04 	sts	0x0484, r24
    112a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							UART_SendString("RESTART Pulse Done ");
    112e:	82 e1       	ldi	r24, 0x12	; 18
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    1136:	10 92 76 04 	sts	0x0476, r1
    113a:	10 92 77 04 	sts	0x0477, r1
    113e:	10 92 78 04 	sts	0x0478, r1
    1142:	10 92 79 04 	sts	0x0479, r1
    1146:	10 92 7a 04 	sts	0x047A, r1
    114a:	10 92 7b 04 	sts	0x047B, r1
    114e:	10 92 7c 04 	sts	0x047C, r1
    1152:	10 92 7d 04 	sts	0x047D, r1
    1156:	42 ca       	rjmp	.-2940   	; 0x5dc <main+0xca>
						}else if(kp==SAFTY_RELAY){
    1158:	8e 30       	cpi	r24, 0x0E	; 14
    115a:	09 f0       	breq	.+2      	; 0x115e <__stack+0x8ff>
    115c:	5f c0       	rjmp	.+190    	; 0x121c <__stack+0x9bd>
    115e:	99 23       	and	r25, r25
    1160:	09 f0       	breq	.+2      	; 0x1164 <__stack+0x905>
    1162:	5c c0       	rjmp	.+184    	; 0x121c <__stack+0x9bd>
    1164:	22 23       	and	r18, r18
    1166:	09 f0       	breq	.+2      	; 0x116a <__stack+0x90b>
    1168:	59 c0       	rjmp	.+178    	; 0x121c <__stack+0x9bd>
    116a:	77 23       	and	r23, r23
    116c:	09 f0       	breq	.+2      	; 0x1170 <__stack+0x911>
    116e:	56 c0       	rjmp	.+172    	; 0x121c <__stack+0x9bd>
    1170:	66 23       	and	r22, r22
    1172:	09 f0       	breq	.+2      	; 0x1176 <__stack+0x917>
    1174:	53 c0       	rjmp	.+166    	; 0x121c <__stack+0x9bd>
    1176:	55 23       	and	r21, r21
    1178:	09 f0       	breq	.+2      	; 0x117c <__stack+0x91d>
    117a:	50 c0       	rjmp	.+160    	; 0x121c <__stack+0x9bd>
    117c:	44 23       	and	r20, r20
    117e:	09 f0       	breq	.+2      	; 0x1182 <__stack+0x923>
    1180:	4d c0       	rjmp	.+154    	; 0x121c <__stack+0x9bd>
    1182:	33 23       	and	r19, r19
    1184:	09 f0       	breq	.+2      	; 0x1188 <__stack+0x929>
    1186:	4a c0       	rjmp	.+148    	; 0x121c <__stack+0x9bd>
							sendTwoByteRelays(OPEN_RELAY(RELAY14));      /*open 5 second*/
    1188:	80 91 84 04 	lds	r24, 0x0484
    118c:	90 91 85 04 	lds	r25, 0x0485
    1190:	90 61       	ori	r25, 0x10	; 16
    1192:	90 93 85 04 	sts	0x0485, r25
    1196:	80 93 84 04 	sts	0x0484, r24
    119a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							sendTwoByteRelays(OPEN_RELAY(RELAY13));
    119e:	80 91 84 04 	lds	r24, 0x0484
    11a2:	90 91 85 04 	lds	r25, 0x0485
    11a6:	98 60       	ori	r25, 0x08	; 8
    11a8:	90 93 85 04 	sts	0x0485, r25
    11ac:	80 93 84 04 	sts	0x0484, r24
    11b0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	93 e2       	ldi	r25, 0x23	; 35
    11b8:	a4 ef       	ldi	r26, 0xF4	; 244
    11ba:	81 50       	subi	r24, 0x01	; 1
    11bc:	90 40       	sbci	r25, 0x00	; 0
    11be:	a0 40       	sbci	r26, 0x00	; 0
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <__stack+0x95b>
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <__stack+0x965>
    11c4:	00 00       	nop
							_delay_ms(5000);
							sendTwoByteRelays(CLOSE_RELAY(RELAY14));
    11c6:	80 91 84 04 	lds	r24, 0x0484
    11ca:	90 91 85 04 	lds	r25, 0x0485
    11ce:	9f 7e       	andi	r25, 0xEF	; 239
    11d0:	90 93 85 04 	sts	0x0485, r25
    11d4:	80 93 84 04 	sts	0x0484, r24
    11d8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							sendTwoByteRelays(CLOSE_RELAY(RELAY13));
    11dc:	80 91 84 04 	lds	r24, 0x0484
    11e0:	90 91 85 04 	lds	r25, 0x0485
    11e4:	97 7f       	andi	r25, 0xF7	; 247
    11e6:	90 93 85 04 	sts	0x0485, r25
    11ea:	80 93 84 04 	sts	0x0484, r24
    11ee:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							UART_SendString("SAFTY Pulse Done ");
    11f2:	86 e2       	ldi	r24, 0x26	; 38
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    11fa:	10 92 76 04 	sts	0x0476, r1
    11fe:	10 92 77 04 	sts	0x0477, r1
    1202:	10 92 78 04 	sts	0x0478, r1
    1206:	10 92 79 04 	sts	0x0479, r1
    120a:	10 92 7a 04 	sts	0x047A, r1
    120e:	10 92 7b 04 	sts	0x047B, r1
    1212:	10 92 7c 04 	sts	0x047C, r1
    1216:	10 92 7d 04 	sts	0x047D, r1
    121a:	e0 c9       	rjmp	.-3136   	; 0x5dc <main+0xca>
						}else if(kp==15){
    121c:	8f 30       	cpi	r24, 0x0F	; 15
    121e:	71 f5       	brne	.+92     	; 0x127c <__stack+0xa1d>
    1220:	99 23       	and	r25, r25
    1222:	61 f5       	brne	.+88     	; 0x127c <__stack+0xa1d>
    1224:	22 23       	and	r18, r18
    1226:	51 f5       	brne	.+84     	; 0x127c <__stack+0xa1d>
    1228:	77 23       	and	r23, r23
    122a:	41 f5       	brne	.+80     	; 0x127c <__stack+0xa1d>
    122c:	66 23       	and	r22, r22
    122e:	31 f5       	brne	.+76     	; 0x127c <__stack+0xa1d>
    1230:	55 23       	and	r21, r21
    1232:	21 f5       	brne	.+72     	; 0x127c <__stack+0xa1d>
    1234:	44 23       	and	r20, r20
    1236:	11 f5       	brne	.+68     	; 0x127c <__stack+0xa1d>
    1238:	33 23       	and	r19, r19
    123a:	01 f5       	brne	.+64     	; 0x127c <__stack+0xa1d>
							sendTwoByteRelays(OPEN_RELAY(RELAY15));      /*open 5 second*/
    123c:	80 91 84 04 	lds	r24, 0x0484
    1240:	90 91 85 04 	lds	r25, 0x0485
    1244:	90 64       	ori	r25, 0x40	; 64
    1246:	90 93 85 04 	sts	0x0485, r25
    124a:	80 93 84 04 	sts	0x0484, r24
    124e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							UART_SendString("RELAY15 ON Done ");
    1252:	88 e3       	ldi	r24, 0x38	; 56
    1254:	93 e0       	ldi	r25, 0x03	; 3
    1256:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    125a:	10 92 76 04 	sts	0x0476, r1
    125e:	10 92 77 04 	sts	0x0477, r1
    1262:	10 92 78 04 	sts	0x0478, r1
    1266:	10 92 79 04 	sts	0x0479, r1
    126a:	10 92 7a 04 	sts	0x047A, r1
    126e:	10 92 7b 04 	sts	0x047B, r1
    1272:	10 92 7c 04 	sts	0x047C, r1
    1276:	10 92 7d 04 	sts	0x047D, r1
    127a:	b0 c9       	rjmp	.-3232   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_10){						/*Pivot Speed - 10% From Minute is ON*/
    127c:	8e 31       	cpi	r24, 0x1E	; 30
    127e:	49 f5       	brne	.+82     	; 0x12d2 <__stack+0xa73>
    1280:	99 23       	and	r25, r25
    1282:	39 f5       	brne	.+78     	; 0x12d2 <__stack+0xa73>
    1284:	22 23       	and	r18, r18
    1286:	29 f5       	brne	.+74     	; 0x12d2 <__stack+0xa73>
    1288:	77 23       	and	r23, r23
    128a:	19 f5       	brne	.+70     	; 0x12d2 <__stack+0xa73>
    128c:	66 23       	and	r22, r22
    128e:	09 f5       	brne	.+66     	; 0x12d2 <__stack+0xa73>
    1290:	55 23       	and	r21, r21
    1292:	f9 f4       	brne	.+62     	; 0x12d2 <__stack+0xa73>
    1294:	44 23       	and	r20, r20
    1296:	e9 f4       	brne	.+58     	; 0x12d2 <__stack+0xa73>
    1298:	33 23       	and	r19, r19
    129a:	d9 f4       	brne	.+54     	; 0x12d2 <__stack+0xa73>
						Sw_Speed =0.1*oneMINTimer;
    129c:	88 e6       	ldi	r24, 0x68	; 104
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	90 93 87 04 	sts	0x0487, r25
    12a4:	80 93 86 04 	sts	0x0486, r24
						UART_SendString("SPEED 10% Done ");
    12a8:	89 e4       	ldi	r24, 0x49	; 73
    12aa:	93 e0       	ldi	r25, 0x03	; 3
    12ac:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						kp=0;
    12b0:	10 92 76 04 	sts	0x0476, r1
    12b4:	10 92 77 04 	sts	0x0477, r1
    12b8:	10 92 78 04 	sts	0x0478, r1
    12bc:	10 92 79 04 	sts	0x0479, r1
    12c0:	10 92 7a 04 	sts	0x047A, r1
    12c4:	10 92 7b 04 	sts	0x047B, r1
    12c8:	10 92 7c 04 	sts	0x047C, r1
    12cc:	10 92 7d 04 	sts	0x047D, r1
    12d0:	85 c9       	rjmp	.-3318   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_20){						/*Pivot Speed - 20% From Minute is ON*/
    12d2:	8f 31       	cpi	r24, 0x1F	; 31
    12d4:	49 f5       	brne	.+82     	; 0x1328 <__stack+0xac9>
    12d6:	99 23       	and	r25, r25
    12d8:	39 f5       	brne	.+78     	; 0x1328 <__stack+0xac9>
    12da:	22 23       	and	r18, r18
    12dc:	29 f5       	brne	.+74     	; 0x1328 <__stack+0xac9>
    12de:	77 23       	and	r23, r23
    12e0:	19 f5       	brne	.+70     	; 0x1328 <__stack+0xac9>
    12e2:	66 23       	and	r22, r22
    12e4:	09 f5       	brne	.+66     	; 0x1328 <__stack+0xac9>
    12e6:	55 23       	and	r21, r21
    12e8:	f9 f4       	brne	.+62     	; 0x1328 <__stack+0xac9>
    12ea:	44 23       	and	r20, r20
    12ec:	e9 f4       	brne	.+58     	; 0x1328 <__stack+0xac9>
    12ee:	33 23       	and	r19, r19
    12f0:	d9 f4       	brne	.+54     	; 0x1328 <__stack+0xac9>
						Sw_Speed =0.2*oneMINTimer;
    12f2:	80 ed       	ldi	r24, 0xD0	; 208
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	90 93 87 04 	sts	0x0487, r25
    12fa:	80 93 86 04 	sts	0x0486, r24
						UART_SendString("SPEED 20% Done ");
    12fe:	89 e5       	ldi	r24, 0x59	; 89
    1300:	93 e0       	ldi	r25, 0x03	; 3
    1302:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						kp=0;
    1306:	10 92 76 04 	sts	0x0476, r1
    130a:	10 92 77 04 	sts	0x0477, r1
    130e:	10 92 78 04 	sts	0x0478, r1
    1312:	10 92 79 04 	sts	0x0479, r1
    1316:	10 92 7a 04 	sts	0x047A, r1
    131a:	10 92 7b 04 	sts	0x047B, r1
    131e:	10 92 7c 04 	sts	0x047C, r1
    1322:	10 92 7d 04 	sts	0x047D, r1
    1326:	5a c9       	rjmp	.-3404   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_30){						/*Pivot Speed - 30% From Minute is ON*/
    1328:	80 32       	cpi	r24, 0x20	; 32
    132a:	49 f5       	brne	.+82     	; 0x137e <__stack+0xb1f>
    132c:	99 23       	and	r25, r25
    132e:	39 f5       	brne	.+78     	; 0x137e <__stack+0xb1f>
    1330:	22 23       	and	r18, r18
    1332:	29 f5       	brne	.+74     	; 0x137e <__stack+0xb1f>
    1334:	77 23       	and	r23, r23
    1336:	19 f5       	brne	.+70     	; 0x137e <__stack+0xb1f>
    1338:	66 23       	and	r22, r22
    133a:	09 f5       	brne	.+66     	; 0x137e <__stack+0xb1f>
    133c:	55 23       	and	r21, r21
    133e:	f9 f4       	brne	.+62     	; 0x137e <__stack+0xb1f>
    1340:	44 23       	and	r20, r20
    1342:	e9 f4       	brne	.+58     	; 0x137e <__stack+0xb1f>
    1344:	33 23       	and	r19, r19
    1346:	d9 f4       	brne	.+54     	; 0x137e <__stack+0xb1f>
						Sw_Speed =0.3*oneMINTimer;
    1348:	88 e3       	ldi	r24, 0x38	; 56
    134a:	94 e0       	ldi	r25, 0x04	; 4
    134c:	90 93 87 04 	sts	0x0487, r25
    1350:	80 93 86 04 	sts	0x0486, r24
						UART_SendString("SPEED 30% Done ");
    1354:	89 e6       	ldi	r24, 0x69	; 105
    1356:	93 e0       	ldi	r25, 0x03	; 3
    1358:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						kp=0;
    135c:	10 92 76 04 	sts	0x0476, r1
    1360:	10 92 77 04 	sts	0x0477, r1
    1364:	10 92 78 04 	sts	0x0478, r1
    1368:	10 92 79 04 	sts	0x0479, r1
    136c:	10 92 7a 04 	sts	0x047A, r1
    1370:	10 92 7b 04 	sts	0x047B, r1
    1374:	10 92 7c 04 	sts	0x047C, r1
    1378:	10 92 7d 04 	sts	0x047D, r1
    137c:	2f c9       	rjmp	.-3490   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_40){						/*Pivot Speed - 40% From Minute is ON*/
    137e:	81 32       	cpi	r24, 0x21	; 33
    1380:	49 f5       	brne	.+82     	; 0x13d4 <__stack+0xb75>
    1382:	99 23       	and	r25, r25
    1384:	39 f5       	brne	.+78     	; 0x13d4 <__stack+0xb75>
    1386:	22 23       	and	r18, r18
    1388:	29 f5       	brne	.+74     	; 0x13d4 <__stack+0xb75>
    138a:	77 23       	and	r23, r23
    138c:	19 f5       	brne	.+70     	; 0x13d4 <__stack+0xb75>
    138e:	66 23       	and	r22, r22
    1390:	09 f5       	brne	.+66     	; 0x13d4 <__stack+0xb75>
    1392:	55 23       	and	r21, r21
    1394:	f9 f4       	brne	.+62     	; 0x13d4 <__stack+0xb75>
    1396:	44 23       	and	r20, r20
    1398:	e9 f4       	brne	.+58     	; 0x13d4 <__stack+0xb75>
    139a:	33 23       	and	r19, r19
    139c:	d9 f4       	brne	.+54     	; 0x13d4 <__stack+0xb75>
						Sw_Speed =0.4*oneMINTimer;
    139e:	80 ea       	ldi	r24, 0xA0	; 160
    13a0:	95 e0       	ldi	r25, 0x05	; 5
    13a2:	90 93 87 04 	sts	0x0487, r25
    13a6:	80 93 86 04 	sts	0x0486, r24
						UART_SendString("SPEED 40% Done ");
    13aa:	89 e7       	ldi	r24, 0x79	; 121
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    13ae:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						kp=0;
    13b2:	10 92 76 04 	sts	0x0476, r1
    13b6:	10 92 77 04 	sts	0x0477, r1
    13ba:	10 92 78 04 	sts	0x0478, r1
    13be:	10 92 79 04 	sts	0x0479, r1
    13c2:	10 92 7a 04 	sts	0x047A, r1
    13c6:	10 92 7b 04 	sts	0x047B, r1
    13ca:	10 92 7c 04 	sts	0x047C, r1
    13ce:	10 92 7d 04 	sts	0x047D, r1
    13d2:	04 c9       	rjmp	.-3576   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_50){						/*Pivot Speed - 50% From Minute is ON*/
    13d4:	82 32       	cpi	r24, 0x22	; 34
    13d6:	49 f5       	brne	.+82     	; 0x142a <__stack+0xbcb>
    13d8:	99 23       	and	r25, r25
    13da:	39 f5       	brne	.+78     	; 0x142a <__stack+0xbcb>
    13dc:	22 23       	and	r18, r18
    13de:	29 f5       	brne	.+74     	; 0x142a <__stack+0xbcb>
    13e0:	77 23       	and	r23, r23
    13e2:	19 f5       	brne	.+70     	; 0x142a <__stack+0xbcb>
    13e4:	66 23       	and	r22, r22
    13e6:	09 f5       	brne	.+66     	; 0x142a <__stack+0xbcb>
    13e8:	55 23       	and	r21, r21
    13ea:	f9 f4       	brne	.+62     	; 0x142a <__stack+0xbcb>
    13ec:	44 23       	and	r20, r20
    13ee:	e9 f4       	brne	.+58     	; 0x142a <__stack+0xbcb>
    13f0:	33 23       	and	r19, r19
    13f2:	d9 f4       	brne	.+54     	; 0x142a <__stack+0xbcb>
						Sw_Speed =0.5*oneMINTimer;
    13f4:	88 e0       	ldi	r24, 0x08	; 8
    13f6:	97 e0       	ldi	r25, 0x07	; 7
    13f8:	90 93 87 04 	sts	0x0487, r25
    13fc:	80 93 86 04 	sts	0x0486, r24
						UART_SendString("SPEED 50% Done ");
    1400:	89 e8       	ldi	r24, 0x89	; 137
    1402:	93 e0       	ldi	r25, 0x03	; 3
    1404:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						kp=0;
    1408:	10 92 76 04 	sts	0x0476, r1
    140c:	10 92 77 04 	sts	0x0477, r1
    1410:	10 92 78 04 	sts	0x0478, r1
    1414:	10 92 79 04 	sts	0x0479, r1
    1418:	10 92 7a 04 	sts	0x047A, r1
    141c:	10 92 7b 04 	sts	0x047B, r1
    1420:	10 92 7c 04 	sts	0x047C, r1
    1424:	10 92 7d 04 	sts	0x047D, r1
    1428:	d9 c8       	rjmp	.-3662   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_60){						/*Pivot Speed - 60% From Minute is ON*/
    142a:	83 32       	cpi	r24, 0x23	; 35
    142c:	49 f5       	brne	.+82     	; 0x1480 <__stack+0xc21>
    142e:	99 23       	and	r25, r25
    1430:	39 f5       	brne	.+78     	; 0x1480 <__stack+0xc21>
    1432:	22 23       	and	r18, r18
    1434:	29 f5       	brne	.+74     	; 0x1480 <__stack+0xc21>
    1436:	77 23       	and	r23, r23
    1438:	19 f5       	brne	.+70     	; 0x1480 <__stack+0xc21>
    143a:	66 23       	and	r22, r22
    143c:	09 f5       	brne	.+66     	; 0x1480 <__stack+0xc21>
    143e:	55 23       	and	r21, r21
    1440:	f9 f4       	brne	.+62     	; 0x1480 <__stack+0xc21>
    1442:	44 23       	and	r20, r20
    1444:	e9 f4       	brne	.+58     	; 0x1480 <__stack+0xc21>
    1446:	33 23       	and	r19, r19
    1448:	d9 f4       	brne	.+54     	; 0x1480 <__stack+0xc21>
						Sw_Speed =0.6*oneMINTimer;
    144a:	80 e7       	ldi	r24, 0x70	; 112
    144c:	98 e0       	ldi	r25, 0x08	; 8
    144e:	90 93 87 04 	sts	0x0487, r25
    1452:	80 93 86 04 	sts	0x0486, r24
						UART_SendString("SPEED 60% Done ");
    1456:	89 e9       	ldi	r24, 0x99	; 153
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						kp=0;
    145e:	10 92 76 04 	sts	0x0476, r1
    1462:	10 92 77 04 	sts	0x0477, r1
    1466:	10 92 78 04 	sts	0x0478, r1
    146a:	10 92 79 04 	sts	0x0479, r1
    146e:	10 92 7a 04 	sts	0x047A, r1
    1472:	10 92 7b 04 	sts	0x047B, r1
    1476:	10 92 7c 04 	sts	0x047C, r1
    147a:	10 92 7d 04 	sts	0x047D, r1
    147e:	ae c8       	rjmp	.-3748   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_70){						/*Pivot Speed - 70% From Minute is ON*/
    1480:	84 32       	cpi	r24, 0x24	; 36
    1482:	49 f5       	brne	.+82     	; 0x14d6 <__stack+0xc77>
    1484:	99 23       	and	r25, r25
    1486:	39 f5       	brne	.+78     	; 0x14d6 <__stack+0xc77>
    1488:	22 23       	and	r18, r18
    148a:	29 f5       	brne	.+74     	; 0x14d6 <__stack+0xc77>
    148c:	77 23       	and	r23, r23
    148e:	19 f5       	brne	.+70     	; 0x14d6 <__stack+0xc77>
    1490:	66 23       	and	r22, r22
    1492:	09 f5       	brne	.+66     	; 0x14d6 <__stack+0xc77>
    1494:	55 23       	and	r21, r21
    1496:	f9 f4       	brne	.+62     	; 0x14d6 <__stack+0xc77>
    1498:	44 23       	and	r20, r20
    149a:	e9 f4       	brne	.+58     	; 0x14d6 <__stack+0xc77>
    149c:	33 23       	and	r19, r19
    149e:	d9 f4       	brne	.+54     	; 0x14d6 <__stack+0xc77>
							Sw_Speed =0.7*oneMINTimer;
    14a0:	88 ed       	ldi	r24, 0xD8	; 216
    14a2:	99 e0       	ldi	r25, 0x09	; 9
    14a4:	90 93 87 04 	sts	0x0487, r25
    14a8:	80 93 86 04 	sts	0x0486, r24
							UART_SendString("SPEED 70% Done ");
    14ac:	89 ea       	ldi	r24, 0xA9	; 169
    14ae:	93 e0       	ldi	r25, 0x03	; 3
    14b0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    14b4:	10 92 76 04 	sts	0x0476, r1
    14b8:	10 92 77 04 	sts	0x0477, r1
    14bc:	10 92 78 04 	sts	0x0478, r1
    14c0:	10 92 79 04 	sts	0x0479, r1
    14c4:	10 92 7a 04 	sts	0x047A, r1
    14c8:	10 92 7b 04 	sts	0x047B, r1
    14cc:	10 92 7c 04 	sts	0x047C, r1
    14d0:	10 92 7d 04 	sts	0x047D, r1
    14d4:	83 c8       	rjmp	.-3834   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_80){						/*Pivot Speed - 80% From Minute is ON*/
    14d6:	85 32       	cpi	r24, 0x25	; 37
    14d8:	49 f5       	brne	.+82     	; 0x152c <__stack+0xccd>
    14da:	99 23       	and	r25, r25
    14dc:	39 f5       	brne	.+78     	; 0x152c <__stack+0xccd>
    14de:	22 23       	and	r18, r18
    14e0:	29 f5       	brne	.+74     	; 0x152c <__stack+0xccd>
    14e2:	77 23       	and	r23, r23
    14e4:	19 f5       	brne	.+70     	; 0x152c <__stack+0xccd>
    14e6:	66 23       	and	r22, r22
    14e8:	09 f5       	brne	.+66     	; 0x152c <__stack+0xccd>
    14ea:	55 23       	and	r21, r21
    14ec:	f9 f4       	brne	.+62     	; 0x152c <__stack+0xccd>
    14ee:	44 23       	and	r20, r20
    14f0:	e9 f4       	brne	.+58     	; 0x152c <__stack+0xccd>
    14f2:	33 23       	and	r19, r19
    14f4:	d9 f4       	brne	.+54     	; 0x152c <__stack+0xccd>
							Sw_Speed =0.8*oneMINTimer;
    14f6:	80 e4       	ldi	r24, 0x40	; 64
    14f8:	9b e0       	ldi	r25, 0x0B	; 11
    14fa:	90 93 87 04 	sts	0x0487, r25
    14fe:	80 93 86 04 	sts	0x0486, r24
							UART_SendString("SPEED 80% Done ");	
    1502:	89 eb       	ldi	r24, 0xB9	; 185
    1504:	93 e0       	ldi	r25, 0x03	; 3
    1506:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    150a:	10 92 76 04 	sts	0x0476, r1
    150e:	10 92 77 04 	sts	0x0477, r1
    1512:	10 92 78 04 	sts	0x0478, r1
    1516:	10 92 79 04 	sts	0x0479, r1
    151a:	10 92 7a 04 	sts	0x047A, r1
    151e:	10 92 7b 04 	sts	0x047B, r1
    1522:	10 92 7c 04 	sts	0x047C, r1
    1526:	10 92 7d 04 	sts	0x047D, r1
    152a:	58 c8       	rjmp	.-3920   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_90){						/*Pivot Speed - 90% From Minute is ON*/
    152c:	86 32       	cpi	r24, 0x26	; 38
    152e:	49 f5       	brne	.+82     	; 0x1582 <__stack+0xd23>
    1530:	99 23       	and	r25, r25
    1532:	39 f5       	brne	.+78     	; 0x1582 <__stack+0xd23>
    1534:	22 23       	and	r18, r18
    1536:	29 f5       	brne	.+74     	; 0x1582 <__stack+0xd23>
    1538:	77 23       	and	r23, r23
    153a:	19 f5       	brne	.+70     	; 0x1582 <__stack+0xd23>
    153c:	66 23       	and	r22, r22
    153e:	09 f5       	brne	.+66     	; 0x1582 <__stack+0xd23>
    1540:	55 23       	and	r21, r21
    1542:	f9 f4       	brne	.+62     	; 0x1582 <__stack+0xd23>
    1544:	44 23       	and	r20, r20
    1546:	e9 f4       	brne	.+58     	; 0x1582 <__stack+0xd23>
    1548:	33 23       	and	r19, r19
    154a:	d9 f4       	brne	.+54     	; 0x1582 <__stack+0xd23>
							Sw_Speed =0.9*oneMINTimer;
    154c:	88 ea       	ldi	r24, 0xA8	; 168
    154e:	9c e0       	ldi	r25, 0x0C	; 12
    1550:	90 93 87 04 	sts	0x0487, r25
    1554:	80 93 86 04 	sts	0x0486, r24
							UART_SendString("SPEED 90% Done ");
    1558:	89 ec       	ldi	r24, 0xC9	; 201
    155a:	93 e0       	ldi	r25, 0x03	; 3
    155c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    1560:	10 92 76 04 	sts	0x0476, r1
    1564:	10 92 77 04 	sts	0x0477, r1
    1568:	10 92 78 04 	sts	0x0478, r1
    156c:	10 92 79 04 	sts	0x0479, r1
    1570:	10 92 7a 04 	sts	0x047A, r1
    1574:	10 92 7b 04 	sts	0x047B, r1
    1578:	10 92 7c 04 	sts	0x047C, r1
    157c:	10 92 7d 04 	sts	0x047D, r1
    1580:	2d c8       	rjmp	.-4006   	; 0x5dc <main+0xca>
						}else if(kp==SPEED_100){					/*Pivot Speed - 100% From Minute is ON*/
    1582:	87 32       	cpi	r24, 0x27	; 39
    1584:	09 f0       	breq	.+2      	; 0x1588 <__stack+0xd29>
    1586:	2a c8       	rjmp	.-4012   	; 0x5dc <main+0xca>
    1588:	99 23       	and	r25, r25
    158a:	09 f0       	breq	.+2      	; 0x158e <__stack+0xd2f>
    158c:	27 c8       	rjmp	.-4018   	; 0x5dc <main+0xca>
    158e:	22 23       	and	r18, r18
    1590:	09 f0       	breq	.+2      	; 0x1594 <__stack+0xd35>
    1592:	24 c8       	rjmp	.-4024   	; 0x5dc <main+0xca>
    1594:	77 23       	and	r23, r23
    1596:	09 f0       	breq	.+2      	; 0x159a <__stack+0xd3b>
    1598:	21 c8       	rjmp	.-4030   	; 0x5dc <main+0xca>
    159a:	66 23       	and	r22, r22
    159c:	09 f0       	breq	.+2      	; 0x15a0 <__stack+0xd41>
    159e:	1e c8       	rjmp	.-4036   	; 0x5dc <main+0xca>
    15a0:	55 23       	and	r21, r21
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <__stack+0xd47>
    15a4:	1b c8       	rjmp	.-4042   	; 0x5dc <main+0xca>
    15a6:	44 23       	and	r20, r20
    15a8:	09 f0       	breq	.+2      	; 0x15ac <__stack+0xd4d>
    15aa:	18 c8       	rjmp	.-4048   	; 0x5dc <main+0xca>
    15ac:	33 23       	and	r19, r19
    15ae:	11 f0       	breq	.+4      	; 0x15b4 <__stack+0xd55>
    15b0:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>
							Sw_Speed =oneMINTimer;
    15b4:	80 e1       	ldi	r24, 0x10	; 16
    15b6:	9e e0       	ldi	r25, 0x0E	; 14
    15b8:	90 93 87 04 	sts	0x0487, r25
    15bc:	80 93 86 04 	sts	0x0486, r24
							UART_SendString("SPEED 100% Done ");	
    15c0:	89 ed       	ldi	r24, 0xD9	; 217
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    15c8:	10 92 76 04 	sts	0x0476, r1
    15cc:	10 92 77 04 	sts	0x0477, r1
    15d0:	10 92 78 04 	sts	0x0478, r1
    15d4:	10 92 79 04 	sts	0x0479, r1
    15d8:	10 92 7a 04 	sts	0x047A, r1
    15dc:	10 92 7b 04 	sts	0x047B, r1
    15e0:	10 92 7c 04 	sts	0x047C, r1
    15e4:	10 92 7d 04 	sts	0x047D, r1
    15e8:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>
							}					
					}else {											/*GENERATOR OFF - SLEEP MODE*/
						UART_SendString("SLEEP MODE - ");
    15ec:	8a ee       	ldi	r24, 0xEA	; 234
    15ee:	93 e0       	ldi	r25, 0x03	; 3
    15f0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						PIN_HIGH(SH_REG_EN_PORT,SH_REG_EN_PIN);		/*CLOSE THE SHIFT REGISTER ENABLE FOR POWER CONSUMTION*/
    15f4:	c1 9a       	sbi	0x18, 1	; 24
						Sw_Speed=0;
    15f6:	10 92 87 04 	sts	0x0487, r1
    15fa:	10 92 86 04 	sts	0x0486, r1
						if(kp==GENERATOR_ON_RELAY){
    15fe:	80 91 76 04 	lds	r24, 0x0476
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	09 f0       	breq	.+2      	; 0x1608 <__stack+0xda9>
    1606:	4a c0       	rjmp	.+148    	; 0x169c <__stack+0xe3d>
    1608:	80 91 77 04 	lds	r24, 0x0477
    160c:	88 23       	and	r24, r24
    160e:	09 f0       	breq	.+2      	; 0x1612 <__stack+0xdb3>
    1610:	45 c0       	rjmp	.+138    	; 0x169c <__stack+0xe3d>
    1612:	80 91 78 04 	lds	r24, 0x0478
    1616:	88 23       	and	r24, r24
    1618:	09 f0       	breq	.+2      	; 0x161c <__stack+0xdbd>
    161a:	40 c0       	rjmp	.+128    	; 0x169c <__stack+0xe3d>
    161c:	80 91 79 04 	lds	r24, 0x0479
    1620:	88 23       	and	r24, r24
    1622:	e1 f5       	brne	.+120    	; 0x169c <__stack+0xe3d>
    1624:	80 91 7a 04 	lds	r24, 0x047A
    1628:	88 23       	and	r24, r24
    162a:	c1 f5       	brne	.+112    	; 0x169c <__stack+0xe3d>
    162c:	80 91 7b 04 	lds	r24, 0x047B
    1630:	88 23       	and	r24, r24
    1632:	a1 f5       	brne	.+104    	; 0x169c <__stack+0xe3d>
    1634:	80 91 7c 04 	lds	r24, 0x047C
    1638:	88 23       	and	r24, r24
    163a:	81 f5       	brne	.+96     	; 0x169c <__stack+0xe3d>
    163c:	80 91 7d 04 	lds	r24, 0x047D
    1640:	88 23       	and	r24, r24
    1642:	61 f5       	brne	.+88     	; 0x169c <__stack+0xe3d>
							PIN_LOW(SH_REG_EN_PORT,SH_REG_EN_PIN);
    1644:	c1 98       	cbi	0x18, 1	; 24
							sendTwoByteRelays(OPEN_RELAY(RELAY0));
    1646:	80 91 84 04 	lds	r24, 0x0484
    164a:	90 91 85 04 	lds	r25, 0x0485
    164e:	80 68       	ori	r24, 0x80	; 128
    1650:	90 93 85 04 	sts	0x0485, r25
    1654:	80 93 84 04 	sts	0x0484, r24
    1658:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							UART_SendString("GENERATOR ON Now");
    165c:	85 e2       	ldi	r24, 0x25	; 37
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							kp=0;
    1664:	10 92 76 04 	sts	0x0476, r1
    1668:	10 92 77 04 	sts	0x0477, r1
    166c:	10 92 78 04 	sts	0x0478, r1
    1670:	10 92 79 04 	sts	0x0479, r1
    1674:	10 92 7a 04 	sts	0x047A, r1
    1678:	10 92 7b 04 	sts	0x047B, r1
    167c:	10 92 7c 04 	sts	0x047C, r1
    1680:	10 92 7d 04 	sts	0x047D, r1
							count1=0;
    1684:	10 92 74 04 	sts	0x0474, r1
							Sw_Speed= Current_Speed;
    1688:	80 91 a4 04 	lds	r24, 0x04A4
    168c:	90 91 a5 04 	lds	r25, 0x04A5
    1690:	90 93 87 04 	sts	0x0487, r25
    1694:	80 93 86 04 	sts	0x0486, r24
    1698:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>
						}else UART_SendString("GENERATOR OFF - FIRE GENER FIRST");
    169c:	88 ef       	ldi	r24, 0xF8	; 248
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
    16a4:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>
					}			
				}else{												/*MANUAL CASE*/
					UART_SendString("MANUAL MODE ON - ");
    16a8:	c1 01       	movw	r24, r2
    16aa:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
					if(kp==GENERATOR_ON_RELAY){
    16ae:	80 91 76 04 	lds	r24, 0x0476
    16b2:	90 91 77 04 	lds	r25, 0x0477
    16b6:	20 91 78 04 	lds	r18, 0x0478
    16ba:	30 91 79 04 	lds	r19, 0x0479
    16be:	40 91 7a 04 	lds	r20, 0x047A
    16c2:	70 91 7b 04 	lds	r23, 0x047B
    16c6:	60 91 7c 04 	lds	r22, 0x047C
    16ca:	50 91 7d 04 	lds	r21, 0x047D
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <__stack+0xe75>
    16d2:	4c c0       	rjmp	.+152    	; 0x176c <__stack+0xf0d>
    16d4:	99 23       	and	r25, r25
    16d6:	09 f0       	breq	.+2      	; 0x16da <__stack+0xe7b>
    16d8:	49 c0       	rjmp	.+146    	; 0x176c <__stack+0xf0d>
    16da:	22 23       	and	r18, r18
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <__stack+0xe81>
    16de:	46 c0       	rjmp	.+140    	; 0x176c <__stack+0xf0d>
    16e0:	33 23       	and	r19, r19
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <__stack+0xe87>
    16e4:	43 c0       	rjmp	.+134    	; 0x176c <__stack+0xf0d>
    16e6:	44 23       	and	r20, r20
    16e8:	09 f0       	breq	.+2      	; 0x16ec <__stack+0xe8d>
    16ea:	40 c0       	rjmp	.+128    	; 0x176c <__stack+0xf0d>
    16ec:	77 23       	and	r23, r23
    16ee:	f1 f5       	brne	.+124    	; 0x176c <__stack+0xf0d>
    16f0:	66 23       	and	r22, r22
    16f2:	e1 f5       	brne	.+120    	; 0x176c <__stack+0xf0d>
    16f4:	55 23       	and	r21, r21
    16f6:	d1 f5       	brne	.+116    	; 0x176c <__stack+0xf0d>
						if (count0==0){
    16f8:	80 91 75 04 	lds	r24, 0x0475
    16fc:	88 23       	and	r24, r24
    16fe:	01 f5       	brne	.+64     	; 0x1740 <__stack+0xee1>
							PIN_LOW(SH_REG_EN_PORT,SH_REG_EN_PIN);
    1700:	c1 98       	cbi	0x18, 1	; 24
							sendTwoByteRelays(OPEN_RELAY(RELAY0));
    1702:	80 91 84 04 	lds	r24, 0x0484
    1706:	90 91 85 04 	lds	r25, 0x0485
    170a:	80 68       	ori	r24, 0x80	; 128
    170c:	90 93 85 04 	sts	0x0485, r25
    1710:	80 93 84 04 	sts	0x0484, r24
    1714:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							UART_SendString("GENERATOR ON Now");
    1718:	85 e2       	ldi	r24, 0x25	; 37
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							count0++;
    1720:	80 91 75 04 	lds	r24, 0x0475
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	80 93 75 04 	sts	0x0475, r24
							count1=0;
    172a:	10 92 74 04 	sts	0x0474, r1
							Sw_Speed=Current_Speed;
    172e:	80 91 a4 04 	lds	r24, 0x04A4
    1732:	90 91 a5 04 	lds	r25, 0x04A5
    1736:	90 93 87 04 	sts	0x0487, r25
    173a:	80 93 86 04 	sts	0x0486, r24
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__stack+0xee9>
						}else UART_SendString("GENERATOR Already ON Now");
    1740:	86 e3       	ldi	r24, 0x36	; 54
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						kp=0;
    1748:	10 92 76 04 	sts	0x0476, r1
    174c:	10 92 77 04 	sts	0x0477, r1
    1750:	10 92 78 04 	sts	0x0478, r1
    1754:	10 92 79 04 	sts	0x0479, r1
    1758:	10 92 7a 04 	sts	0x047A, r1
    175c:	10 92 7b 04 	sts	0x047B, r1
    1760:	10 92 7c 04 	sts	0x047C, r1
    1764:	10 92 7d 04 	sts	0x047D, r1
    1768:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>
					}else if(kp==GENERATOR_OFF_RELAY){
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	09 f0       	breq	.+2      	; 0x1772 <__stack+0xf13>
    1770:	53 c0       	rjmp	.+166    	; 0x1818 <__stack+0xfb9>
    1772:	99 23       	and	r25, r25
    1774:	09 f0       	breq	.+2      	; 0x1778 <__stack+0xf19>
    1776:	50 c0       	rjmp	.+160    	; 0x1818 <__stack+0xfb9>
    1778:	22 23       	and	r18, r18
    177a:	09 f0       	breq	.+2      	; 0x177e <__stack+0xf1f>
    177c:	4d c0       	rjmp	.+154    	; 0x1818 <__stack+0xfb9>
    177e:	33 23       	and	r19, r19
    1780:	09 f0       	breq	.+2      	; 0x1784 <__stack+0xf25>
    1782:	4a c0       	rjmp	.+148    	; 0x1818 <__stack+0xfb9>
    1784:	44 23       	and	r20, r20
    1786:	09 f0       	breq	.+2      	; 0x178a <__stack+0xf2b>
    1788:	47 c0       	rjmp	.+142    	; 0x1818 <__stack+0xfb9>
    178a:	77 23       	and	r23, r23
    178c:	09 f0       	breq	.+2      	; 0x1790 <__stack+0xf31>
    178e:	44 c0       	rjmp	.+136    	; 0x1818 <__stack+0xfb9>
    1790:	66 23       	and	r22, r22
    1792:	09 f0       	breq	.+2      	; 0x1796 <__stack+0xf37>
    1794:	41 c0       	rjmp	.+130    	; 0x1818 <__stack+0xfb9>
    1796:	55 23       	and	r21, r21
    1798:	09 f0       	breq	.+2      	; 0x179c <__stack+0xf3d>
    179a:	3e c0       	rjmp	.+124    	; 0x1818 <__stack+0xfb9>
						if (count1==0)
    179c:	80 91 74 04 	lds	r24, 0x0474
    17a0:	88 23       	and	r24, r24
    17a2:	21 f5       	brne	.+72     	; 0x17ec <__stack+0xf8d>
						{
							sendTwoByteRelays(CLOSE_RELAY(RELAY0));
    17a4:	80 91 84 04 	lds	r24, 0x0484
    17a8:	90 91 85 04 	lds	r25, 0x0485
    17ac:	8f 77       	andi	r24, 0x7F	; 127
    17ae:	90 93 85 04 	sts	0x0485, r25
    17b2:	80 93 84 04 	sts	0x0484, r24
    17b6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <sendTwoByteRelays>
							PIN_HIGH(SH_REG_EN_PORT,SH_REG_EN_PIN);
    17ba:	c1 9a       	sbi	0x18, 1	; 24
							Current_Speed = Sw_Speed;
    17bc:	80 91 86 04 	lds	r24, 0x0486
    17c0:	90 91 87 04 	lds	r25, 0x0487
    17c4:	90 93 a5 04 	sts	0x04A5, r25
    17c8:	80 93 a4 04 	sts	0x04A4, r24
							Sw_Speed=0;
    17cc:	10 92 87 04 	sts	0x0487, r1
    17d0:	10 92 86 04 	sts	0x0486, r1
							UART_SendString("GENERATOR OFF Now");
    17d4:	8f e4       	ldi	r24, 0x4F	; 79
    17d6:	91 e0       	ldi	r25, 0x01	; 1
    17d8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
							count1++;
    17dc:	80 91 74 04 	lds	r24, 0x0474
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	80 93 74 04 	sts	0x0474, r24
							count0=0;
    17e6:	10 92 75 04 	sts	0x0475, r1
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <__stack+0xf95>
						}else UART_SendString("GENERATOR Already OFF Now");
    17ec:	81 e6       	ldi	r24, 0x61	; 97
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
						kp=0;
    17f4:	10 92 76 04 	sts	0x0476, r1
    17f8:	10 92 77 04 	sts	0x0477, r1
    17fc:	10 92 78 04 	sts	0x0478, r1
    1800:	10 92 79 04 	sts	0x0479, r1
    1804:	10 92 7a 04 	sts	0x047A, r1
    1808:	10 92 7b 04 	sts	0x047B, r1
    180c:	10 92 7c 04 	sts	0x047C, r1
    1810:	10 92 7d 04 	sts	0x047D, r1
    1814:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>
					}else UART_SendString("CAN ON or OFF GENERATOR ONLY");
    1818:	8b e2       	ldi	r24, 0x2B	; 43
    181a:	94 e0       	ldi	r25, 0x04	; 4
    181c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
    1820:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>
			
			
				}	
			
			} 
			else if(Time==FINISGED)
    1824:	80 91 ba 04 	lds	r24, 0x04BA
    1828:	90 91 bb 04 	lds	r25, 0x04BB
    182c:	a0 91 bc 04 	lds	r26, 0x04BC
    1830:	b0 91 bd 04 	lds	r27, 0x04BD
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	a1 05       	cpc	r26, r1
    183a:	b1 05       	cpc	r27, r1
    183c:	11 f0       	breq	.+4      	; 0x1842 <__stack+0xfe3>
    183e:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>
			{
				UART_SendString("AVAILABLE TIME FINISHED");
    1842:	88 e4       	ldi	r24, 0x48	; 72
    1844:	94 e0       	ldi	r25, 0x04	; 4
    1846:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>
    184a:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <main+0xca>

0000184e <cycleClocklcd>:
#define RELAYS_SHIFT_STROBE PB2 //pin to enable/disable strobe


void cycleClocklcd(void)
{
	LCD_SHIFT_ADDRESS |= (1<<LCD_SHIFT_CLK);
    184e:	ab 9a       	sbi	0x15, 3	; 21
    1850:	8f e1       	ldi	r24, 0x1F	; 31
    1852:	9e e4       	ldi	r25, 0x4E	; 78
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <cycleClocklcd+0x6>
    1858:	00 c0       	rjmp	.+0      	; 0x185a <cycleClocklcd+0xc>
    185a:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
	LCD_SHIFT_ADDRESS &= ~(1<<LCD_SHIFT_CLK);
    185c:	ab 98       	cbi	0x15, 3	; 21
    185e:	8f e1       	ldi	r24, 0x1F	; 31
    1860:	9e e4       	ldi	r25, 0x4E	; 78
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <cycleClocklcd+0x14>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <cycleClocklcd+0x1a>
    1868:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
}
    186a:	08 95       	ret

0000186c <cycleClockRelays>:

void cycleClockRelays(void)
{
	RELAYS_SHIFT_ADDRESS |= (1<<RELAYS_SHIFT_CLK);
    186c:	c3 9a       	sbi	0x18, 3	; 24
    186e:	8f e1       	ldi	r24, 0x1F	; 31
    1870:	9e e4       	ldi	r25, 0x4E	; 78
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <cycleClockRelays+0x6>
    1876:	00 c0       	rjmp	.+0      	; 0x1878 <cycleClockRelays+0xc>
    1878:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
	RELAYS_SHIFT_ADDRESS &= ~(1<<RELAYS_SHIFT_CLK);
    187a:	c3 98       	cbi	0x18, 3	; 24
    187c:	8f e1       	ldi	r24, 0x1F	; 31
    187e:	9e e4       	ldi	r25, 0x4E	; 78
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <cycleClockRelays+0x14>
    1884:	00 c0       	rjmp	.+0      	; 0x1886 <cycleClockRelays+0x1a>
    1886:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
}
    1888:	08 95       	ret

0000188a <sendBitlcd>:

void sendBitlcd(unsigned char b)
{
	LCD_SHIFT_ADDRESS = (LCD_SHIFT_ADDRESS & ~(1<<LCD_SHIFT_DATA)) | (b<<LCD_SHIFT_DATA);
    188a:	95 b3       	in	r25, 0x15	; 21
    188c:	82 95       	swap	r24
    188e:	80 7f       	andi	r24, 0xF0	; 240
    1890:	9f 7e       	andi	r25, 0xEF	; 239
    1892:	98 2b       	or	r25, r24
    1894:	95 bb       	out	0x15, r25	; 21
    1896:	8f e1       	ldi	r24, 0x1F	; 31
    1898:	9e e4       	ldi	r25, 0x4E	; 78
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <sendBitlcd+0x10>
    189e:	00 c0       	rjmp	.+0      	; 0x18a0 <sendBitlcd+0x16>
    18a0:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
	cycleClocklcd();
    18a2:	0e 94 27 0c 	call	0x184e	; 0x184e <cycleClocklcd>
}
    18a6:	08 95       	ret

000018a8 <sendBitRelays>:

void sendBitRelays(unsigned char b)
{
	RELAYS_SHIFT_ADDRESS = (RELAYS_SHIFT_ADDRESS & ~(1<<RELAYS_SHIFT_DATA)) | (b<<RELAYS_SHIFT_DATA);
    18a8:	98 b3       	in	r25, 0x18	; 24
    18aa:	9e 7f       	andi	r25, 0xFE	; 254
    18ac:	89 2b       	or	r24, r25
    18ae:	88 bb       	out	0x18, r24	; 24
    18b0:	8f e1       	ldi	r24, 0x1F	; 31
    18b2:	9e e4       	ldi	r25, 0x4E	; 78
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <sendBitRelays+0xc>
    18b8:	00 c0       	rjmp	.+0      	; 0x18ba <sendBitRelays+0x12>
    18ba:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
	cycleClockRelays();
    18bc:	0e 94 36 0c 	call	0x186c	; 0x186c <cycleClockRelays>
}
    18c0:	08 95       	ret

000018c2 <enableRegisters>:
	// 	strobeOnRelays();
// }

void enableRegisters(void) {
	//LCD_SHIFT_ADDRESS |= (1<<SHIFT_OE);
	RELAYS_SHIFT_ADDRESS |= (1<<SHIFT_OE);
    18c2:	c1 9a       	sbi	0x18, 1	; 24
}
    18c4:	08 95       	ret

000018c6 <disableRegisters>:

void disableRegisters(void) {
	//LCD_SHIFT_ADDRESS &= ~(1<<SHIFT_OE);
	RELAYS_SHIFT_ADDRESS &= ~(1<<SHIFT_OE);
    18c6:	c1 98       	cbi	0x18, 1	; 24
}
    18c8:	08 95       	ret

000018ca <strobeOnlcd>:
    18ca:	8f e1       	ldi	r24, 0x1F	; 31
    18cc:	9e e4       	ldi	r25, 0x4E	; 78
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <strobeOnlcd+0x4>
    18d2:	00 c0       	rjmp	.+0      	; 0x18d4 <strobeOnlcd+0xa>
    18d4:	00 00       	nop

void strobeOnlcd(void)
{
	if(!LCD_SHIFT_STROBE) return; //if no strobe pin set do nothing
	_delay_ms(SHR_Delay_MS);
	LCD_SHIFT_ADDRESS |= (1<<LCD_SHIFT_STROBE);
    18d6:	aa 9a       	sbi	0x15, 2	; 21
    18d8:	8f e1       	ldi	r24, 0x1F	; 31
    18da:	9e e4       	ldi	r25, 0x4E	; 78
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <strobeOnlcd+0x12>
    18e0:	00 c0       	rjmp	.+0      	; 0x18e2 <strobeOnlcd+0x18>
    18e2:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
}
    18e4:	08 95       	ret

000018e6 <strobeOnRelays>:
    18e6:	8f e1       	ldi	r24, 0x1F	; 31
    18e8:	9e e4       	ldi	r25, 0x4E	; 78
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <strobeOnRelays+0x4>
    18ee:	00 c0       	rjmp	.+0      	; 0x18f0 <strobeOnRelays+0xa>
    18f0:	00 00       	nop

void strobeOnRelays(void)
{
	if(!RELAYS_SHIFT_STROBE) return; //if no strobe pin set do nothing
	_delay_ms(SHR_Delay_MS);
	RELAYS_SHIFT_ADDRESS |= (1<<RELAYS_SHIFT_STROBE);
    18f2:	c2 9a       	sbi	0x18, 2	; 24
    18f4:	8f e1       	ldi	r24, 0x1F	; 31
    18f6:	9e e4       	ldi	r25, 0x4E	; 78
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <strobeOnRelays+0x12>
    18fc:	00 c0       	rjmp	.+0      	; 0x18fe <strobeOnRelays+0x18>
    18fe:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
}
    1900:	08 95       	ret

00001902 <strobeOfflcd>:
    1902:	8f e1       	ldi	r24, 0x1F	; 31
    1904:	9e e4       	ldi	r25, 0x4E	; 78
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <strobeOfflcd+0x4>
    190a:	00 c0       	rjmp	.+0      	; 0x190c <strobeOfflcd+0xa>
    190c:	00 00       	nop

void strobeOfflcd(void)
{
	if(!LCD_SHIFT_STROBE) return; //if no strobe pin set do nothing
	_delay_ms(SHR_Delay_MS);
	LCD_SHIFT_ADDRESS &= ~(1<<LCD_SHIFT_STROBE);
    190e:	aa 98       	cbi	0x15, 2	; 21
    1910:	8f e1       	ldi	r24, 0x1F	; 31
    1912:	9e e4       	ldi	r25, 0x4E	; 78
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <strobeOfflcd+0x12>
    1918:	00 c0       	rjmp	.+0      	; 0x191a <strobeOfflcd+0x18>
    191a:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
}
    191c:	08 95       	ret

0000191e <sendNibblelcd>:
	strobeOnRelays();
}


void sendNibblelcd(unsigned char n)//assumes Q8 as most significant bit
{
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	08 2f       	mov	r16, r24
	strobeOfflcd();
    1928:	0e 94 81 0c 	call	0x1902	; 0x1902 <strobeOfflcd>
    192c:	c3 e0       	ldi	r28, 0x03	; 3
    192e:	d0 e0       	ldi	r29, 0x00	; 0
	// 	for (signed char i = 1; i >-1; i--)
	// 	{
		// 		sendBitlcd((n >> i) & 0x01);
	// 	}
	for (signed char i = 3; i >-1; i--) {
		sendBitlcd((n >> i) & 0x01);
    1930:	10 e0       	ldi	r17, 0x00	; 0
    1932:	c8 01       	movw	r24, r16
    1934:	0c 2e       	mov	r0, r28
    1936:	02 c0       	rjmp	.+4      	; 0x193c <sendNibblelcd+0x1e>
    1938:	95 95       	asr	r25
    193a:	87 95       	ror	r24
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <sendNibblelcd+0x1a>
    1940:	81 70       	andi	r24, 0x01	; 1
    1942:	0e 94 45 0c 	call	0x188a	; 0x188a <sendBitlcd>
    1946:	21 97       	sbiw	r28, 0x01	; 1
	strobeOfflcd();
	// 	for (signed char i = 1; i >-1; i--)
	// 	{
		// 		sendBitlcd((n >> i) & 0x01);
	// 	}
	for (signed char i = 3; i >-1; i--) {
    1948:	8f ef       	ldi	r24, 0xFF	; 255
    194a:	cf 3f       	cpi	r28, 0xFF	; 255
    194c:	d8 07       	cpc	r29, r24
    194e:	89 f7       	brne	.-30     	; 0x1932 <sendNibblelcd+0x14>
		sendBitlcd((n >> i) & 0x01);
	}
	strobeOnlcd();
    1950:	0e 94 65 0c 	call	0x18ca	; 0x18ca <strobeOnlcd>
}
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <LCDsendTwoByte>:
	}
	strobeOnlcd();
}

void LCDsendTwoByte(uint16_t b) //assumes Q8 as most significant bit
{
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	8c 01       	movw	r16, r24
	strobeOfflcd();
    1968:	0e 94 81 0c 	call	0x1902	; 0x1902 <strobeOfflcd>
    196c:	cf e0       	ldi	r28, 0x0F	; 15
    196e:	d0 e0       	ldi	r29, 0x00	; 0
	for (signed char i = 15; i > -1; i--) {
		sendBitlcd((b >> i) & 0x0001);
    1970:	c8 01       	movw	r24, r16
    1972:	0c 2e       	mov	r0, r28
    1974:	02 c0       	rjmp	.+4      	; 0x197a <LCDsendTwoByte+0x1c>
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <LCDsendTwoByte+0x18>
    197e:	81 70       	andi	r24, 0x01	; 1
    1980:	0e 94 45 0c 	call	0x188a	; 0x188a <sendBitlcd>
    1984:	8f e1       	ldi	r24, 0x1F	; 31
    1986:	9e e4       	ldi	r25, 0x4E	; 78
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCDsendTwoByte+0x2a>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <LCDsendTwoByte+0x30>
    198e:	00 00       	nop
    1990:	21 97       	sbiw	r28, 0x01	; 1
}

void LCDsendTwoByte(uint16_t b) //assumes Q8 as most significant bit
{
	strobeOfflcd();
	for (signed char i = 15; i > -1; i--) {
    1992:	9f ef       	ldi	r25, 0xFF	; 255
    1994:	cf 3f       	cpi	r28, 0xFF	; 255
    1996:	d9 07       	cpc	r29, r25
    1998:	59 f7       	brne	.-42     	; 0x1970 <LCDsendTwoByte+0x12>
		sendBitlcd((b >> i) & 0x0001);
		_delay_ms(SHR_Delay_MS);
	}
	strobeOnlcd();
    199a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <strobeOnlcd>
}
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	08 95       	ret

000019a8 <sendBytelcd>:
	_delay_ms(SHR_Delay_MS);
	cycleClockRelays();
}

void sendBytelcd(unsigned char b) //assumes Q8 as most significant bit
{
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	08 2f       	mov	r16, r24
	strobeOfflcd();
    19b2:	0e 94 81 0c 	call	0x1902	; 0x1902 <strobeOfflcd>
    19b6:	c7 e0       	ldi	r28, 0x07	; 7
    19b8:	d0 e0       	ldi	r29, 0x00	; 0
	for (signed char i = 7; i > -1; i--) {
		sendBitlcd((b >> i) & 0x01);
    19ba:	10 e0       	ldi	r17, 0x00	; 0
    19bc:	c8 01       	movw	r24, r16
    19be:	0c 2e       	mov	r0, r28
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <sendBytelcd+0x1e>
    19c2:	95 95       	asr	r25
    19c4:	87 95       	ror	r24
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <sendBytelcd+0x1a>
    19ca:	81 70       	andi	r24, 0x01	; 1
    19cc:	0e 94 45 0c 	call	0x188a	; 0x188a <sendBitlcd>
    19d0:	8f e1       	ldi	r24, 0x1F	; 31
    19d2:	9e e4       	ldi	r25, 0x4E	; 78
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <sendBytelcd+0x2c>
    19d8:	00 c0       	rjmp	.+0      	; 0x19da <sendBytelcd+0x32>
    19da:	00 00       	nop
    19dc:	21 97       	sbiw	r28, 0x01	; 1
}

void sendBytelcd(unsigned char b) //assumes Q8 as most significant bit
{
	strobeOfflcd();
	for (signed char i = 7; i > -1; i--) {
    19de:	9f ef       	ldi	r25, 0xFF	; 255
    19e0:	cf 3f       	cpi	r28, 0xFF	; 255
    19e2:	d9 07       	cpc	r29, r25
    19e4:	59 f7       	brne	.-42     	; 0x19bc <sendBytelcd+0x14>
		sendBitlcd((b >> i) & 0x01);
		_delay_ms(SHR_Delay_MS);
	}
	strobeOnlcd();
    19e6:	0e 94 65 0c 	call	0x18ca	; 0x18ca <strobeOnlcd>
}
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	08 95       	ret

000019f4 <strobeOffRelays>:
    19f4:	8f e1       	ldi	r24, 0x1F	; 31
    19f6:	9e e4       	ldi	r25, 0x4E	; 78
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <strobeOffRelays+0x4>
    19fc:	00 c0       	rjmp	.+0      	; 0x19fe <strobeOffRelays+0xa>
    19fe:	00 00       	nop

void strobeOffRelays(void)
{
	if(!RELAYS_SHIFT_STROBE) return; //if no strobe pin set do nothing
	_delay_ms(SHR_Delay_MS);
	RELAYS_SHIFT_ADDRESS &= ~(1<<RELAYS_SHIFT_STROBE);
    1a00:	c2 98       	cbi	0x18, 2	; 24
    1a02:	8f e1       	ldi	r24, 0x1F	; 31
    1a04:	9e e4       	ldi	r25, 0x4E	; 78
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <strobeOffRelays+0x12>
    1a0a:	00 c0       	rjmp	.+0      	; 0x1a0c <strobeOffRelays+0x18>
    1a0c:	00 00       	nop
	_delay_ms(SHR_Delay_MS);
}
    1a0e:	08 95       	ret

00001a10 <sendTwoByteRelays>:
	}
	strobeOnRelays();
}

void sendTwoByteRelays(uint16_t b) //assumes Q8 as most significant bit
{
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	8c 01       	movw	r16, r24
	strobeOffRelays();
    1a1a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <strobeOffRelays>
    1a1e:	cf e0       	ldi	r28, 0x0F	; 15
    1a20:	d0 e0       	ldi	r29, 0x00	; 0
	for (signed char i = 15; i > -1; i--) {
		sendBitRelays((b >> i) & 0x0001);
    1a22:	c8 01       	movw	r24, r16
    1a24:	0c 2e       	mov	r0, r28
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <sendTwoByteRelays+0x1c>
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <sendTwoByteRelays+0x18>
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <sendBitRelays>
    1a36:	8f e1       	ldi	r24, 0x1F	; 31
    1a38:	9e e4       	ldi	r25, 0x4E	; 78
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <sendTwoByteRelays+0x2a>
    1a3e:	00 c0       	rjmp	.+0      	; 0x1a40 <sendTwoByteRelays+0x30>
    1a40:	00 00       	nop
    1a42:	21 97       	sbiw	r28, 0x01	; 1
}

void sendTwoByteRelays(uint16_t b) //assumes Q8 as most significant bit
{
	strobeOffRelays();
	for (signed char i = 15; i > -1; i--) {
    1a44:	9f ef       	ldi	r25, 0xFF	; 255
    1a46:	cf 3f       	cpi	r28, 0xFF	; 255
    1a48:	d9 07       	cpc	r29, r25
    1a4a:	59 f7       	brne	.-42     	; 0x1a22 <sendTwoByteRelays+0x12>
		sendBitRelays((b >> i) & 0x0001);
		_delay_ms(SHR_Delay_MS);
	}
	strobeOnRelays();
    1a4c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <strobeOnRelays>
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <sendByteRelays>:
	}
	strobeOnlcd();
}

void sendByteRelays(unsigned char b) //assumes Q8 as most significant bit
{
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	08 2f       	mov	r16, r24
	strobeOffRelays();
    1a64:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <strobeOffRelays>
    1a68:	c7 e0       	ldi	r28, 0x07	; 7
    1a6a:	d0 e0       	ldi	r29, 0x00	; 0
	for (signed char i = 7; i > -1; i--) {
		sendBitRelays((b >> i) & 0x01);
    1a6c:	10 e0       	ldi	r17, 0x00	; 0
    1a6e:	c8 01       	movw	r24, r16
    1a70:	0c 2e       	mov	r0, r28
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <sendByteRelays+0x1e>
    1a74:	95 95       	asr	r25
    1a76:	87 95       	ror	r24
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <sendByteRelays+0x1a>
    1a7c:	81 70       	andi	r24, 0x01	; 1
    1a7e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <sendBitRelays>
    1a82:	8f e1       	ldi	r24, 0x1F	; 31
    1a84:	9e e4       	ldi	r25, 0x4E	; 78
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <sendByteRelays+0x2c>
    1a8a:	00 c0       	rjmp	.+0      	; 0x1a8c <sendByteRelays+0x32>
    1a8c:	00 00       	nop
    1a8e:	21 97       	sbiw	r28, 0x01	; 1
}

void sendByteRelays(unsigned char b) //assumes Q8 as most significant bit
{
	strobeOffRelays();
	for (signed char i = 7; i > -1; i--) {
    1a90:	9f ef       	ldi	r25, 0xFF	; 255
    1a92:	cf 3f       	cpi	r28, 0xFF	; 255
    1a94:	d9 07       	cpc	r29, r25
    1a96:	59 f7       	brne	.-42     	; 0x1a6e <sendByteRelays+0x14>
		sendBitRelays((b >> i) & 0x01);
		_delay_ms(SHR_Delay_MS);
	}
	strobeOnRelays();
    1a98:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <strobeOnRelays>
}
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	08 95       	ret

00001aa6 <testShiftRegister>:


void testShiftRegister()
{
	//all registers on
	sendByteRelays(0b11111111);
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <sendByteRelays>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	91 ee       	ldi	r25, 0xE1	; 225
    1ab0:	a4 e0       	ldi	r26, 0x04	; 4
    1ab2:	81 50       	subi	r24, 0x01	; 1
    1ab4:	90 40       	sbci	r25, 0x00	; 0
    1ab6:	a0 40       	sbci	r26, 0x00	; 0
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <testShiftRegister+0xc>
    1aba:	00 c0       	rjmp	.+0      	; 0x1abc <testShiftRegister+0x16>
    1abc:	00 00       	nop
	_delay_ms(100);
	
	//all registers off
	sendByteRelays(0b00000000);
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <sendByteRelays>
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	91 ee       	ldi	r25, 0xE1	; 225
    1ac8:	a4 e0       	ldi	r26, 0x04	; 4
    1aca:	81 50       	subi	r24, 0x01	; 1
    1acc:	90 40       	sbci	r25, 0x00	; 0
    1ace:	a0 40       	sbci	r26, 0x00	; 0
    1ad0:	e1 f7       	brne	.-8      	; 0x1aca <testShiftRegister+0x24>
    1ad2:	00 c0       	rjmp	.+0      	; 0x1ad4 <testShiftRegister+0x2e>
    1ad4:	00 00       	nop
	_delay_ms(100);
	
	//all registers on
	sendByteRelays(0b11111111);
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <sendByteRelays>
    1adc:	8f ef       	ldi	r24, 0xFF	; 255
    1ade:	91 ee       	ldi	r25, 0xE1	; 225
    1ae0:	a4 e0       	ldi	r26, 0x04	; 4
    1ae2:	81 50       	subi	r24, 0x01	; 1
    1ae4:	90 40       	sbci	r25, 0x00	; 0
    1ae6:	a0 40       	sbci	r26, 0x00	; 0
    1ae8:	e1 f7       	brne	.-8      	; 0x1ae2 <testShiftRegister+0x3c>
    1aea:	00 c0       	rjmp	.+0      	; 0x1aec <testShiftRegister+0x46>
    1aec:	00 00       	nop
	_delay_ms(100);
	
	//all registers off
	sendByteRelays(0b00000000);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <sendByteRelays>
    1af4:	08 95       	ret

00001af6 <TIMER0_Init>:

#include "Includes.h"

void TIMER0_Init(void){
	// enable timer overflow interrupt for both Timer0
	TIMSK |=(1<<TOIE0);
    1af6:	89 b7       	in	r24, 0x39	; 57
    1af8:	81 60       	ori	r24, 0x01	; 1
    1afa:	89 bf       	out	0x39, r24	; 57
	// set timer0 counter initial value to 0
	TCNT0=0x00;
    1afc:	12 be       	out	0x32, r1	; 50
	// start timer0 with /1024 prescaler
	TCCR0 = (1<<CS02) | (1<<CS00);
    1afe:	85 e0       	ldi	r24, 0x05	; 5
    1b00:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |= (1<<CS02) | (1<<CS01);
	//TCCR0 |= (1<<CS00);
	sei();
    1b02:	78 94       	sei
    1b04:	08 95       	ret

00001b06 <UART_Init>:
 *  Author: Mostafa Ali
 */ 
#include "Includes.h"

void UART_Init(unsigned long Speed)
{
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
	// Set Frame Formta -> 8 data, 1 stop, No Parity
	UCSRC = 0x86;
    1b0a:	26 e8       	ldi	r18, 0x86	; 134
    1b0c:	20 bd       	out	0x20, r18	; 32
	// Enable RX and TX
	UCSRB = 0x18;//0x98
    1b0e:	28 e1       	ldi	r18, 0x18	; 24
    1b10:	2a b9       	out	0x0a, r18	; 10
	/* Enable transmitter and receiver (RXEN and TXEN),
   enable reception interrupt (RXCIE) */
	//UCSRB |= (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);

	unsigned long baud = (F_CPU/(16 * Speed)) - 1 ;		// if BaudRate -> 9600/16MhZ	at U2X = 0
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	aa 1f       	adc	r26, r26
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	aa 1f       	adc	r26, r26
    1b20:	bb 1f       	adc	r27, r27
    1b22:	9c 01       	movw	r18, r24
    1b24:	ad 01       	movw	r20, r26
    1b26:	22 0f       	add	r18, r18
    1b28:	33 1f       	adc	r19, r19
    1b2a:	44 1f       	adc	r20, r20
    1b2c:	55 1f       	adc	r21, r21
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	44 1f       	adc	r20, r20
    1b34:	55 1f       	adc	r21, r21
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	74 e2       	ldi	r23, 0x24	; 36
    1b3a:	84 ef       	ldi	r24, 0xF4	; 244
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__udivmodsi4>
    1b42:	da 01       	movw	r26, r20
    1b44:	c9 01       	movw	r24, r18
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	a1 09       	sbc	r26, r1
    1b4a:	b1 09       	sbc	r27, r1
	UBRRL = (unsigned char)baud;
    1b4c:	89 b9       	out	0x09, r24	; 9
	// 	//UBRRL = 103;
	UBRRH = (unsigned char)(baud >> 8);
    1b4e:	89 2f       	mov	r24, r25
    1b50:	9a 2f       	mov	r25, r26
    1b52:	ab 2f       	mov	r26, r27
    1b54:	bb 27       	eor	r27, r27
    1b56:	80 bd       	out	0x20, r24	; 32
	// 	//UBRRH = 0;
	//sei();
}
    1b58:	08 95       	ret

00001b5a <UART_SendChar>:

void UART_SendChar(unsigned char data)
{
	// Wait untill transmission Register Empty
	//while((UCSRA&0x20) == 0x00);
	while ( !( UCSRA & (1<<UDRE)) );
    1b5a:	5d 9b       	sbis	0x0b, 5	; 11
    1b5c:	fe cf       	rjmp	.-4      	; 0x1b5a <UART_SendChar>
	UDR = data;
    1b5e:	8c b9       	out	0x0c, r24	; 12
}
    1b60:	08 95       	ret

00001b62 <UART_GetChar>:

unsigned char UART_GetChar(unsigned int *time_out)
{
    1b62:	fc 01       	movw	r30, r24
	// Wait untill Reception Complete
	unsigned char x;
	UCSRB |= (1<<RXEN);
    1b64:	54 9a       	sbi	0x0a, 4	; 10
	while(((UCSRA&0x80) == 0x00)&&(*time_out != 60000))
    1b66:	5f 99       	sbic	0x0b, 7	; 11
    1b68:	10 c0       	rjmp	.+32     	; 0x1b8a <UART_GetChar+0x28>
    1b6a:	20 81       	ld	r18, Z
    1b6c:	31 81       	ldd	r19, Z+1	; 0x01
    1b6e:	8a ee       	ldi	r24, 0xEA	; 234
    1b70:	20 36       	cpi	r18, 0x60	; 96
    1b72:	38 07       	cpc	r19, r24
    1b74:	51 f0       	breq	.+20     	; 0x1b8a <UART_GetChar+0x28>
	*time_out = *time_out + 1;
    1b76:	2f 5f       	subi	r18, 0xFF	; 255
    1b78:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7a:	31 83       	std	Z+1, r19	; 0x01
    1b7c:	20 83       	st	Z, r18
unsigned char UART_GetChar(unsigned int *time_out)
{
	// Wait untill Reception Complete
	unsigned char x;
	UCSRB |= (1<<RXEN);
	while(((UCSRA&0x80) == 0x00)&&(*time_out != 60000))
    1b7e:	5f 99       	sbic	0x0b, 7	; 11
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <UART_GetChar+0x28>
    1b82:	8a ee       	ldi	r24, 0xEA	; 234
    1b84:	20 36       	cpi	r18, 0x60	; 96
    1b86:	38 07       	cpc	r19, r24
    1b88:	b1 f7       	brne	.-20     	; 0x1b76 <UART_GetChar+0x14>
	*time_out = *time_out + 1;
	x = UDR;
    1b8a:	8c b1       	in	r24, 0x0c	; 12
	UCSRB &= ~(1<<RXEN);
    1b8c:	54 98       	cbi	0x0a, 4	; 10
	return x;
	
// 	while(! (UCSRA & (1 << RXC)));
// 	return UDR;
}
    1b8e:	08 95       	ret

00001b90 <UART_GetChar2>:
unsigned char UART_GetChar2(void)
{
	/*Wait until Reception Complete*/
	//while((UCSRA&0x80) == 0x00);
	while(! (UCSRA & (1 << RXC)));
    1b90:	5f 9b       	sbis	0x0b, 7	; 11
    1b92:	fe cf       	rjmp	.-4      	; 0x1b90 <UART_GetChar2>
	return UDR;
    1b94:	8c b1       	in	r24, 0x0c	; 12
}
    1b96:	08 95       	ret

00001b98 <UART_SendString>:

void UART_SendString(unsigned char *str)
{
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	ec 01       	movw	r28, r24
	while(*str != '\0')
    1b9e:	88 81       	ld	r24, Y
    1ba0:	88 23       	and	r24, r24
    1ba2:	31 f0       	breq	.+12     	; 0x1bb0 <UART_SendString+0x18>
	//while((UCSRA&0x80) == 0x00);
	while(! (UCSRA & (1 << RXC)));
	return UDR;
}

void UART_SendString(unsigned char *str)
    1ba4:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UART_SendChar(*str);
    1ba6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <UART_SendChar>
	return UDR;
}

void UART_SendString(unsigned char *str)
{
	while(*str != '\0')
    1baa:	89 91       	ld	r24, Y+
    1bac:	88 23       	and	r24, r24
    1bae:	d9 f7       	brne	.-10     	; 0x1ba6 <UART_SendString+0xe>
	{
		UART_SendChar(*str);
		str++;
	}
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <USART_SendInteger>:

void USART_SendInteger(uint16_t num)
{
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	2a 97       	sbiw	r28, 0x0a	; 10
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
 	uint8_t snum[10];
 	itoa(num, snum, DECIMAL);
    1bca:	be 01       	movw	r22, r28
    1bcc:	6f 5f       	subi	r22, 0xFF	; 255
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	4a e0       	ldi	r20, 0x0A	; 10
    1bd2:	50 e0       	ldi	r21, 0x00	; 0
    1bd4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <itoa>
 	UART_SendString(snum);
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <UART_SendString>

 }
    1be0:	2a 96       	adiw	r28, 0x0a	; 10
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	08 95       	ret

00001bf2 <UART_GetString>:

void UART_GetString(unsigned char *str)
{
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <UART_GetString+0xa>
	unsigned char temp = 0;
	do
	{
		temp = UART_GetChar2();
		*str = temp;
		str++;
    1bfa:	ef 01       	movw	r28, r30
void UART_GetString(unsigned char *str)
{
	unsigned char temp = 0;
	do
	{
		temp = UART_GetChar2();
    1bfc:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <UART_GetChar2>
		*str = temp;
    1c00:	fe 01       	movw	r30, r28
    1c02:	81 93       	st	Z+, r24
		str++;
	}while(temp != '#');
    1c04:	83 32       	cpi	r24, 0x23	; 35
    1c06:	c9 f7       	brne	.-14     	; 0x1bfa <UART_GetString+0x8>
	
	str--;
	*str = '\0';
    1c08:	18 82       	st	Y, r1
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <__udivmodsi4>:
    1c10:	a1 e2       	ldi	r26, 0x21	; 33
    1c12:	1a 2e       	mov	r1, r26
    1c14:	aa 1b       	sub	r26, r26
    1c16:	bb 1b       	sub	r27, r27
    1c18:	fd 01       	movw	r30, r26
    1c1a:	0d c0       	rjmp	.+26     	; 0x1c36 <__udivmodsi4_ep>

00001c1c <__udivmodsi4_loop>:
    1c1c:	aa 1f       	adc	r26, r26
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	ee 1f       	adc	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	a2 17       	cp	r26, r18
    1c26:	b3 07       	cpc	r27, r19
    1c28:	e4 07       	cpc	r30, r20
    1c2a:	f5 07       	cpc	r31, r21
    1c2c:	20 f0       	brcs	.+8      	; 0x1c36 <__udivmodsi4_ep>
    1c2e:	a2 1b       	sub	r26, r18
    1c30:	b3 0b       	sbc	r27, r19
    1c32:	e4 0b       	sbc	r30, r20
    1c34:	f5 0b       	sbc	r31, r21

00001c36 <__udivmodsi4_ep>:
    1c36:	66 1f       	adc	r22, r22
    1c38:	77 1f       	adc	r23, r23
    1c3a:	88 1f       	adc	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	1a 94       	dec	r1
    1c40:	69 f7       	brne	.-38     	; 0x1c1c <__udivmodsi4_loop>
    1c42:	60 95       	com	r22
    1c44:	70 95       	com	r23
    1c46:	80 95       	com	r24
    1c48:	90 95       	com	r25
    1c4a:	9b 01       	movw	r18, r22
    1c4c:	ac 01       	movw	r20, r24
    1c4e:	bd 01       	movw	r22, r26
    1c50:	cf 01       	movw	r24, r30
    1c52:	08 95       	ret

00001c54 <atoi>:
    1c54:	fc 01       	movw	r30, r24
    1c56:	88 27       	eor	r24, r24
    1c58:	99 27       	eor	r25, r25
    1c5a:	e8 94       	clt
    1c5c:	21 91       	ld	r18, Z+
    1c5e:	20 32       	cpi	r18, 0x20	; 32
    1c60:	e9 f3       	breq	.-6      	; 0x1c5c <atoi+0x8>
    1c62:	29 30       	cpi	r18, 0x09	; 9
    1c64:	10 f0       	brcs	.+4      	; 0x1c6a <atoi+0x16>
    1c66:	2e 30       	cpi	r18, 0x0E	; 14
    1c68:	c8 f3       	brcs	.-14     	; 0x1c5c <atoi+0x8>
    1c6a:	2b 32       	cpi	r18, 0x2B	; 43
    1c6c:	41 f0       	breq	.+16     	; 0x1c7e <atoi+0x2a>
    1c6e:	2d 32       	cpi	r18, 0x2D	; 45
    1c70:	39 f4       	brne	.+14     	; 0x1c80 <atoi+0x2c>
    1c72:	68 94       	set
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <atoi+0x2a>
    1c76:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__mulhi_const_10>
    1c7a:	82 0f       	add	r24, r18
    1c7c:	91 1d       	adc	r25, r1
    1c7e:	21 91       	ld	r18, Z+
    1c80:	20 53       	subi	r18, 0x30	; 48
    1c82:	2a 30       	cpi	r18, 0x0A	; 10
    1c84:	c0 f3       	brcs	.-16     	; 0x1c76 <atoi+0x22>
    1c86:	1e f4       	brtc	.+6      	; 0x1c8e <atoi+0x3a>
    1c88:	90 95       	com	r25
    1c8a:	81 95       	neg	r24
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	08 95       	ret

00001c90 <memset>:
    1c90:	dc 01       	movw	r26, r24
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <memset+0x6>
    1c94:	6d 93       	st	X+, r22
    1c96:	41 50       	subi	r20, 0x01	; 1
    1c98:	50 40       	sbci	r21, 0x00	; 0
    1c9a:	e0 f7       	brcc	.-8      	; 0x1c94 <memset+0x4>
    1c9c:	08 95       	ret

00001c9e <itoa>:
    1c9e:	fb 01       	movw	r30, r22
    1ca0:	9f 01       	movw	r18, r30
    1ca2:	e8 94       	clt
    1ca4:	42 30       	cpi	r20, 0x02	; 2
    1ca6:	c4 f0       	brlt	.+48     	; 0x1cd8 <itoa+0x3a>
    1ca8:	45 32       	cpi	r20, 0x25	; 37
    1caa:	b4 f4       	brge	.+44     	; 0x1cd8 <itoa+0x3a>
    1cac:	4a 30       	cpi	r20, 0x0A	; 10
    1cae:	29 f4       	brne	.+10     	; 0x1cba <itoa+0x1c>
    1cb0:	97 fb       	bst	r25, 7
    1cb2:	1e f4       	brtc	.+6      	; 0x1cba <itoa+0x1c>
    1cb4:	90 95       	com	r25
    1cb6:	81 95       	neg	r24
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	64 2f       	mov	r22, r20
    1cbc:	77 27       	eor	r23, r23
    1cbe:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__udivmodhi4>
    1cc2:	80 5d       	subi	r24, 0xD0	; 208
    1cc4:	8a 33       	cpi	r24, 0x3A	; 58
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <itoa+0x2c>
    1cc8:	89 5d       	subi	r24, 0xD9	; 217
    1cca:	81 93       	st	Z+, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	a1 f7       	brne	.-24     	; 0x1cba <itoa+0x1c>
    1cd2:	16 f4       	brtc	.+4      	; 0x1cd8 <itoa+0x3a>
    1cd4:	5d e2       	ldi	r21, 0x2D	; 45
    1cd6:	51 93       	st	Z+, r21
    1cd8:	10 82       	st	Z, r1
    1cda:	c9 01       	movw	r24, r18
    1cdc:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <strrev>

00001ce0 <__mulhi_const_10>:
    1ce0:	7a e0       	ldi	r23, 0x0A	; 10
    1ce2:	97 9f       	mul	r25, r23
    1ce4:	90 2d       	mov	r25, r0
    1ce6:	87 9f       	mul	r24, r23
    1ce8:	80 2d       	mov	r24, r0
    1cea:	91 0d       	add	r25, r1
    1cec:	11 24       	eor	r1, r1
    1cee:	08 95       	ret

00001cf0 <__eerd_byte_m32>:
    1cf0:	e1 99       	sbic	0x1c, 1	; 28
    1cf2:	fe cf       	rjmp	.-4      	; 0x1cf0 <__eerd_byte_m32>
    1cf4:	9f bb       	out	0x1f, r25	; 31
    1cf6:	8e bb       	out	0x1e, r24	; 30
    1cf8:	e0 9a       	sbi	0x1c, 0	; 28
    1cfa:	99 27       	eor	r25, r25
    1cfc:	8d b3       	in	r24, 0x1d	; 29
    1cfe:	08 95       	ret

00001d00 <__eeupd_byte_m32>:
    1d00:	26 2f       	mov	r18, r22

00001d02 <__eeupd_r18_m32>:
    1d02:	e1 99       	sbic	0x1c, 1	; 28
    1d04:	fe cf       	rjmp	.-4      	; 0x1d02 <__eeupd_r18_m32>
    1d06:	9f bb       	out	0x1f, r25	; 31
    1d08:	8e bb       	out	0x1e, r24	; 30
    1d0a:	e0 9a       	sbi	0x1c, 0	; 28
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	0d b2       	in	r0, 0x1d	; 29
    1d10:	02 16       	cp	r0, r18
    1d12:	31 f0       	breq	.+12     	; 0x1d20 <__eeupd_r18_m32+0x1e>
    1d14:	2d bb       	out	0x1d, r18	; 29
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	e2 9a       	sbi	0x1c, 2	; 28
    1d1c:	e1 9a       	sbi	0x1c, 1	; 28
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	08 95       	ret

00001d22 <strrev>:
    1d22:	dc 01       	movw	r26, r24
    1d24:	fc 01       	movw	r30, r24
    1d26:	67 2f       	mov	r22, r23
    1d28:	71 91       	ld	r23, Z+
    1d2a:	77 23       	and	r23, r23
    1d2c:	e1 f7       	brne	.-8      	; 0x1d26 <strrev+0x4>
    1d2e:	32 97       	sbiw	r30, 0x02	; 2
    1d30:	04 c0       	rjmp	.+8      	; 0x1d3a <strrev+0x18>
    1d32:	7c 91       	ld	r23, X
    1d34:	6d 93       	st	X+, r22
    1d36:	70 83       	st	Z, r23
    1d38:	62 91       	ld	r22, -Z
    1d3a:	ae 17       	cp	r26, r30
    1d3c:	bf 07       	cpc	r27, r31
    1d3e:	c8 f3       	brcs	.-14     	; 0x1d32 <strrev+0x10>
    1d40:	08 95       	ret

00001d42 <__udivmodhi4>:
    1d42:	aa 1b       	sub	r26, r26
    1d44:	bb 1b       	sub	r27, r27
    1d46:	51 e1       	ldi	r21, 0x11	; 17
    1d48:	07 c0       	rjmp	.+14     	; 0x1d58 <__udivmodhi4_ep>

00001d4a <__udivmodhi4_loop>:
    1d4a:	aa 1f       	adc	r26, r26
    1d4c:	bb 1f       	adc	r27, r27
    1d4e:	a6 17       	cp	r26, r22
    1d50:	b7 07       	cpc	r27, r23
    1d52:	10 f0       	brcs	.+4      	; 0x1d58 <__udivmodhi4_ep>
    1d54:	a6 1b       	sub	r26, r22
    1d56:	b7 0b       	sbc	r27, r23

00001d58 <__udivmodhi4_ep>:
    1d58:	88 1f       	adc	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	5a 95       	dec	r21
    1d5e:	a9 f7       	brne	.-22     	; 0x1d4a <__udivmodhi4_loop>
    1d60:	80 95       	com	r24
    1d62:	90 95       	com	r25
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	08 95       	ret

00001d6a <_exit>:
    1d6a:	f8 94       	cli

00001d6c <__stop_program>:
    1d6c:	ff cf       	rjmp	.-2      	; 0x1d6c <__stop_program>
